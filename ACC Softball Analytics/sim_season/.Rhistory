library(tidyverse)
setwd("~/Desktop/Projects/softball-projects/ACC Softball Analytics/sim_season")
source("get_current_rpi.R")
source("get_power_ratings.R")
source("acc_season_sims.R")
scoreboard <- load_ncaa_scoreboard(2023)
standings <- get_power_ratings(scoreboard)
table <- sim_season(scoreboard, 1)
View(scoreboard)
library(softballR)
library(tidyverse)
setwd("~/Desktop/Projects/softball-projects/ACC Softball Analytics/sim_season")
source("get_current_rpi.R")
source("get_power_ratings.R")
source("acc_season_sims.R")
scoreboard <- load_ncaa_scoreboard(2023)
standings <- get_power_ratings(scoreboard)
table <- sim_season(scoreboard, 1)
library(softballR)
library(tidyverse)
setwd("~/Desktop/Projects/softball-projects/ACC Softball Analytics/sim_season")
source("get_current_rpi.R")
source("get_power_ratings.R")
source("acc_season_sims.R")
scoreboard <- load_ncaa_scoreboard(2023)
standings <- get_power_ratings(scoreboard)
table <- sim_season(scoreboard, 1)
View(standings)
ratings <- get_power_ratings(scoreboard) %>%
select(team, power_rating)
logos <- load_espn_scoreboard(2023) %>%
distinct(home_team_display_name, home_team_logo) %>%
mutate(home_team_display_name = ifelse(home_team_display_name == "Florida State", "Florida St.", home_team_display_name))
ratings <- get_power_ratings(scoreboard) %>%
select(team, power_rating)
acc_teams <- c("Clemson", "Duke", "Louisville", "Florida St.", "Virginia Tech", "Georgia Tech",
"North Carolina", "Notre Dame", "Virginia", "Pittsburgh", "Boston College", "NC State", "Syracuse")
completed <- scoreboard %>%
filter(away_team %in% acc_teams & home_team %in% acc_teams)
completed <- rbind(completed[c(1,2,3,4,5)] %>% `names<-`(c("date", "team", "opponent", "runs", "opponent_runs")),
completed[c(1,3,2,5,4)] %>% `names<-`(c("date", "team", "opponent", "runs", "opponent_runs"))) %>%
mutate(win = runs > opponent_runs,
tie = runs == opponent_runs)
current_standings <- completed %>%
group_by(team) %>%
summarise(games = n(),
wins = sum(win),
ties = sum(tie),
losses = games - wins - ties,
record = paste0(wins,"-",losses,"-",ties))
remaining <- data.frame(team = c(rep("Clemson", 12), rep("Duke", 9), rep("Louisville",12), rep("Florida St.",15), rep("Virginia Tech",12), rep("Georgia Tech",12),
rep("North Carolina",12), rep("Notre Dame", 12), rep("Virginia",12), rep("Pittsburgh",15), rep("Boston College",15), rep("NC State",12), rep("Syracuse",12)),
opponent = c(rep("Florida St.",3), rep("NC State", 3), rep("Pittsburgh",3), rep("Virginia Tech", 3),
rep("Boston College",3), rep("Georgia Tech", 3), rep("Pittsburgh", 3),
rep("Notre Dame",3), rep("Virginia",3), rep("Boston College",3), rep("Florida St.",3),
rep("Clemson",3), rep("Virginia",3), rep("Virginia Tech",3), rep("Notre Dame",3), rep("Louisville",3),
rep("Virginia",3), rep("Notre Dame",3), rep("Florida St.",3), rep("Clemson",3),
rep("Boston College",3), rep("Pittsburgh",3), rep("Duke",3), rep("North Carolina",3),
rep("Pittsburgh",3), rep("Syracuse",3), rep("NC State",3), rep("Georgia Tech",3),
rep("Louisville",3), rep("Virginia Tech",3), rep("Boston College",3), rep("Florida St.",3),
rep("Virginia Tech",3), rep("Florida State",3), rep("Louisville",3), rep("Syracuse", 3),
rep("North Carolina",3), rep("Georgia Tech",3), rep("Clemson",3), rep("Duke",3), rep("NC State",3),
rep("Georgia Tech",3), rep("Duke",3), rep("Notre Dame",3), rep("Louisville",3), rep("Syracuse",3),
rep("Syracuse",3), rep("Clemson",3), rep("North Carolina",3), rep("Pittsburgh",3),
rep("NC State",3), rep("North Carolina",3), rep("Boston College",3), rep("Virginia",3)))
remaining <- data.frame(team = c(rep("Clemson", 10), rep("Duke", 9), rep("Louisville",12), rep("Florida St.",13), rep("Virginia Tech",12), rep("Georgia Tech",12),
rep("North Carolina",12), rep("Notre Dame", 12), rep("Virginia",12), rep("Pittsburgh",15), rep("Boston College",15), rep("NC State",11), rep("Syracuse",11)),
opponent = c(rep("Florida St.",1), rep("NC State", 3), rep("Pittsburgh",3), rep("Virginia Tech", 3),
rep("Boston College",3), rep("Georgia Tech", 3), rep("Pittsburgh", 3),
rep("Notre Dame",3), rep("Virginia",3), rep("Boston College",3), rep("Florida St.",3),
rep("Clemson",1), rep("Virginia",3), rep("Virginia Tech",3), rep("Notre Dame",3), rep("Louisville",3),
rep("Virginia",3), rep("Notre Dame",3), rep("Florida St.",3), rep("Clemson",3),
rep("Boston College",3), rep("Pittsburgh",3), rep("Duke",3), rep("North Carolina",3),
rep("Pittsburgh",3), rep("Syracuse",3), rep("NC State",3), rep("Georgia Tech",3),
rep("Louisville",3), rep("Virginia Tech",3), rep("Boston College",3), rep("Florida St.",3),
rep("Virginia Tech",3), rep("Florida State",3), rep("Louisville",3), rep("Syracuse", 3),
rep("North Carolina",3), rep("Georgia Tech",3), rep("Clemson",3), rep("Duke",3), rep("NC State",3),
rep("Georgia Tech",3), rep("Duke",3), rep("Notre Dame",3), rep("Louisville",3), rep("Syracuse",3),
rep("Syracuse",2), rep("Clemson",3), rep("North Carolina",3), rep("Pittsburgh",3),
rep("NC State",2), rep("North Carolina",3), rep("Boston College",3), rep("Virginia",3)))
remaining_sos <- remaining %>%
merge(ratings, by.x = "opponent", by.y = "team") %>%
group_by(team) %>%
summarise(avg_rating = mean(power_rating)) %>%
ungroup() %>%
mutate(rank = rank(-avg_rating)) %>%
select(team, rank)
simulate_seasons <- function(probs, n_sims){
results <- data.frame()
for(sim in 1:n_sims){
for(i in 1:nrow(probs)){
probs$win[i] <- sample(c(T,F), prob = c(probs$prob[i], 1 - probs$prob[i]))
}
probs_upd <- rbind(probs %>% select(team, opponent, win),
completed %>% select(team, opponent, win)) %>%
mutate(sim_id = sim)
results <- rbind(results, probs_upd)
if(sim %% 100 == 0) print(sim)
}
return(results)
}
get_standings <- function(results){
records <- results %>%
group_by(team, sim_id) %>%
summarise(games = n(),
wins = sum(win),
losses = games - wins,
win_perc = wins / games) %>%
ungroup() %>%
group_by(sim_id) %>%
mutate(rank = rank(-win_perc, ties.method = "random")) %>%
ungroup()
records_upd <- records %>%
group_by(team) %>%
summarise(win = mean(rank == 1),
top3 = mean(rank <= 3),
top6 = mean(rank <= 6),
make_tournament = mean(rank <= 10))
#print(mean(records %>% filter(rank  == 10) %>% pull(wins)))
return(records_upd)
}
probs <- remaining %>%
select(team, opponent) %>%
merge(ratings, by.x = "team", by.y = "team") %>%
rename(away_team_rating = power_rating) %>%
merge(ratings, by.x = "opponent", by.y = "team") %>%
rename(home_team_rating = power_rating)
load(file = "power_rating_model.RDA")
probs$prob = predict(model, probs, type = "response")
View(probs)
probs <- remaining %>%
select(team, opponent) %>%
merge(ratings, by.x = "team", by.y = "team") %>%
rename(team1_rating = power_rating) %>%
merge(ratings, by.x = "opponent", by.y = "team") %>%
rename(team2_rating = power_rating)
load(file = "power_rating_model.RDA")
probs$prob = predict(model, probs, type = "response")
View(probs)
library(softballR)
library(tidyverse)
setwd("~/Desktop/Projects/softball-projects/ACC Softball Analytics/sim_season")
source("get_current_rpi.R")
source("get_power_ratings.R")
source("acc_season_sims.R")
scoreboard <- load_ncaa_scoreboard(2023)
standings <- get_power_ratings(scoreboard)
table <- sim_season(scoreboard, 1)
ratings <- get_power_ratings(scoreboard) %>%
select(team, power_rating)
acc_teams <- c("Clemson", "Duke", "Louisville", "Florida St.", "Virginia Tech", "Georgia Tech",
"North Carolina", "Notre Dame", "Virginia", "Pittsburgh", "Boston College", "NC State", "Syracuse")
completed <- scoreboard %>%
filter(away_team %in% acc_teams & home_team %in% acc_teams)
completed <- rbind(completed[c(1,2,3,4,5)] %>% `names<-`(c("date", "team", "opponent", "runs", "opponent_runs")),
completed[c(1,3,2,5,4)] %>% `names<-`(c("date", "team", "opponent", "runs", "opponent_runs"))) %>%
mutate(win = runs > opponent_runs,
tie = runs == opponent_runs)
current_standings <- completed %>%
group_by(team) %>%
summarise(games = n(),
wins = sum(win),
ties = sum(tie),
losses = games - wins - ties,
record = paste0(wins,"-",losses,"-",ties))
remaining <- data.frame(team = c(rep("Clemson", 10), rep("Duke", 9), rep("Louisville",12), rep("Florida St.",13), rep("Virginia Tech",12), rep("Georgia Tech",12),
rep("North Carolina",12), rep("Notre Dame", 12), rep("Virginia",12), rep("Pittsburgh",15), rep("Boston College",15), rep("NC State",11), rep("Syracuse",11)),
opponent = c(rep("Florida St.",1), rep("NC State", 3), rep("Pittsburgh",3), rep("Virginia Tech", 3),
rep("Boston College",3), rep("Georgia Tech", 3), rep("Pittsburgh", 3),
rep("Notre Dame",3), rep("Virginia",3), rep("Boston College",3), rep("Florida St.",3),
rep("Clemson",1), rep("Virginia",3), rep("Virginia Tech",3), rep("Notre Dame",3), rep("Louisville",3),
rep("Virginia",3), rep("Notre Dame",3), rep("Florida St.",3), rep("Clemson",3),
rep("Boston College",3), rep("Pittsburgh",3), rep("Duke",3), rep("North Carolina",3),
rep("Pittsburgh",3), rep("Syracuse",3), rep("NC State",3), rep("Georgia Tech",3),
rep("Louisville",3), rep("Virginia Tech",3), rep("Boston College",3), rep("Florida St.",3),
rep("Virginia Tech",3), rep("Florida State",3), rep("Louisville",3), rep("Syracuse", 3),
rep("North Carolina",3), rep("Georgia Tech",3), rep("Clemson",3), rep("Duke",3), rep("NC State",3),
rep("Georgia Tech",3), rep("Duke",3), rep("Notre Dame",3), rep("Louisville",3), rep("Syracuse",3),
rep("Syracuse",2), rep("Clemson",3), rep("North Carolina",3), rep("Pittsburgh",3),
rep("NC State",2), rep("North Carolina",3), rep("Boston College",3), rep("Virginia",3)))
remaining_sos <- remaining %>%
merge(ratings, by.x = "opponent", by.y = "team") %>%
group_by(team) %>%
summarise(avg_rating = mean(power_rating)) %>%
ungroup() %>%
mutate(rank = rank(-avg_rating)) %>%
select(team, rank)
simulate_seasons <- function(probs, n_sims){
results <- data.frame()
for(sim in 1:n_sims){
for(i in 1:nrow(probs)){
probs$win[i] <- sample(c(T,F), prob = c(probs$prob[i], 1 - probs$prob[i]))
}
probs_upd <- rbind(probs %>% select(team, opponent, win),
completed %>% select(team, opponent, win)) %>%
mutate(sim_id = sim)
results <- rbind(results, probs_upd)
if(sim %% 100 == 0) print(sim)
}
return(results)
}
get_standings <- function(results){
records <- results %>%
group_by(team, sim_id) %>%
summarise(games = n(),
wins = sum(win),
losses = games - wins,
win_perc = wins / games) %>%
ungroup() %>%
group_by(sim_id) %>%
mutate(rank = rank(-win_perc, ties.method = "random")) %>%
ungroup()
records_upd <- records %>%
group_by(team) %>%
summarise(win = mean(rank == 1),
top3 = mean(rank <= 3),
top6 = mean(rank <= 6),
make_tournament = mean(rank <= 10))
#print(mean(records %>% filter(rank  == 10) %>% pull(wins)))
return(records_upd)
}
probs <- remaining %>%
select(team, opponent) %>%
merge(ratings, by.x = "team", by.y = "team") %>%
rename(team1_rating = power_rating) %>%
merge(ratings, by.x = "opponent", by.y = "team") %>%
rename(team2_rating = power_rating)
load(file = "power_rating_model.RDA")
probs$prob = predict(model, probs, type = "response")
results <- simulate_seasons(probs,num_sims)
num_sims = 1
standings <- get_standings(results)
results <- simulate_seasons(probs,num_sims)
standings <- get_standings(results)
View(standings)
View(probs)
View(results)
View(probs)
results <- data.frame()
for(sim in 1:n_sims){
for(i in 1:nrow(probs)){
probs$win[i] <- sample(c(T,F), prob = c(probs$prob[i], 1 - probs$prob[i]))
}
probs_upd <- rbind(probs %>% select(team, opponent, win),
completed %>% select(team, opponent, win)) %>%
mutate(sim_id = sim)
results <- rbind(results, probs_upd)
if(sim %% 100 == 0) print(sim)
}
sim = 1
i = 1
probs$win[i] <- sample(c(T,F), prob = c(probs$prob[i], 1 - probs$prob[i]))
View(probs)
View(completed)
ratings <- get_power_ratings(scoreboard) %>%
select(team, power_rating)
acc_teams <- c("Clemson", "Duke", "Louisville", "Florida St.", "Virginia Tech", "Georgia Tech",
"North Carolina", "Notre Dame", "Virginia", "Pittsburgh", "Boston College", "NC State", "Syracuse")
completed <- scoreboard %>%
filter(away_team %in% acc_teams & home_team %in% acc_teams)
View(completed)
View(current_standings)
library(softballR)
library(tidyverse)
setwd("~/Desktop/Projects/softball-projects/ACC Softball Analytics/sim_season")
source("get_current_rpi.R")
source("get_power_ratings.R")
source("acc_season_sims.R")
scoreboard <- load_ncaa_scoreboard(2023)
standings <- get_power_ratings(scoreboard)
table <- sim_season(scoreboard, 1)
table
ratings <- get_power_ratings(scoreboard) %>%
select(team, power_rating)
logos <- scoreboard %>%
distinct(home_team, home_team_logo)
acc_teams <- c("Clemson", "Duke", "Louisville", "Florida St.", "Virginia Tech", "Georgia Tech",
"North Carolina", "Notre Dame", "Virginia", "Pittsburgh", "Boston College", "NC State", "Syracuse")
completed <- scoreboard %>%
filter(away_team %in% acc_teams & home_team %in% acc_teams)
completed <- rbind(completed[c(9,1,4,5,8)] %>% `names<-`(c("date", "team", "opponent", "runs", "opponent_runs")),
completed[c(9,5,8,1,4)] %>% `names<-`(c("date", "team", "opponent", "runs", "opponent_runs"))) %>%
mutate(win = runs > opponent_runs,
tie = runs == opponent_runs)
View(completed)
names(scoreboard)
scoreboard[c(9,1,4,5,8)]
team1_scoreboard <- scoreboard[c(9,1,4,5,8)] %>% `names<-`(c("date","team_name","runs","opponent_name","opponent_runs"))
team2_scoreboard <- scoreboard[c(9,5,8,1,4)] %>% `names<-`(c("date","team_name","runs","opponent_name","opponent_runs"))
scoreboard_upd <- rbind(team1_scoreboard, team2_scoreboard) %>%
mutate(win = case_when(runs > opponent_runs ~ 1,
runs < opponent_runs ~ 0,
runs == opponent_runs ~ 0.5))
View(scoreboard_upd)
current_standings <- completed %>%
group_by(team_name) %>%
summarise(games = n(),
wins = sum(win),
ties = sum(tie),
losses = games - wins - ties,
record = paste0(wins,"-",losses,"-",ties))
completed <- scoreboard %>%
filter(away_team %in% acc_teams & home_team %in% acc_teams)
completed <- rbind(completed[c(9,1,4,5,8)] %>% `names<-`(c("date", "team", "opponent", "runs", "opponent_runs")),
completed[c(9,5,8,1,4)] %>% `names<-`(c("date", "team", "opponent", "runs", "opponent_runs"))) %>%
mutate(win = runs > opponent_runs,
tie = runs == opponent_runs)
View(completed)
completed <- scoreboard %>%
filter(away_team %in% acc_teams & home_team %in% acc_teams)
completed <- rbind(completed[c(9,1,4,5,8)] %>% `names<-`(c("date", "team", "opponent", "runs", "opponent_runs")),
completed[c(9,5,8,1,4)] %>% `names<-`(c("date", "team", "opponent", "runs", "opponent_runs")))
View(completed)
completed <- rbind(completed[c(9,1,4,5,8)] %>% `names<-`(c("date", "team", "runs", "opponent", "opponent_runs")),
completed[c(9,5,8,1,4)] %>% `names<-`(c("date", "team", "runs", "opponent", "opponent_runs"))) %>%
mutate(win = runs > opponent_runs,
tie = runs == opponent_runs)
completed <- scoreboard %>%
filter(away_team %in% acc_teams & home_team %in% acc_teams)
completed <- rbind(completed[c(9,1,4,5,8)] %>% `names<-`(c("date", "team", "runs", "opponent", "opponent_runs")),
completed[c(9,5,8,1,4)] %>% `names<-`(c("date", "team", "runs", "opponent", "opponent_runs"))) %>%
mutate(win = runs > opponent_runs,
tie = runs == opponent_runs)
current_standings <- completed %>%
group_by(team) %>%
summarise(games = n(),
wins = sum(win),
ties = sum(tie),
losses = games - wins - ties,
record = paste0(wins,"-",losses,"-",ties))
View(current_standings)
library(softballR)
library(tidyverse)
setwd("~/Desktop/Projects/softball-projects/ACC Softball Analytics/sim_season")
source("get_current_rpi.R")
source("get_power_ratings.R")
source("acc_season_sims.R")
scoreboard <- load_ncaa_scoreboard(2023)
standings <- get_power_ratings(scoreboard)
table <- sim_season(scoreboard, 1)
table
scoreboard$game_date
library(softballR)
library(tidyverse)
setwd("~/Desktop/Projects/softball-projects/ACC Softball Analytics/sim_season")
source("get_current_rpi.R")
source("get_power_ratings.R")
source("acc_season_sims.R")
scoreboard <- load_ncaa_scoreboard(2023)
standings <- get_power_ratings(scoreboard)
table <- sim_season(scoreboard, 1)
table
records <- results %>%
group_by(team, sim_id) %>%
summarise(games = n(),
wins = sum(win),
losses = games - wins,
win_perc = wins / games) %>%
ungroup() %>%
group_by(sim_id) %>%
mutate(rank = rank(-win_perc, ties.method = "random")) %>%
ungroup()
results <- simulate_seasons(probs,num_sims)
library(softballR)
library(tidyverse)
setwd("~/Desktop/Projects/softball-projects/ACC Softball Analytics/sim_season")
source("get_current_rpi.R")
source("get_power_ratings.R")
source("acc_season_sims.R")
scoreboard <- load_ncaa_scoreboard(2023)
standings <- get_power_ratings(scoreboard)
table <- sim_season(scoreboard, 1000)
library(softballR)
library(tidyverse)
setwd("~/Desktop/Projects/softball-projects/ACC Softball Analytics/sim_season")
source("get_current_rpi.R")
source("get_power_ratings.R")
source("acc_season_sims.R")
scoreboard <- load_ncaa_scoreboard(2023)
standings <- get_power_ratings(scoreboard)
results <- sim_season(scoreboard, 1)
ratings <- get_power_ratings(scoreboard) %>%
select(team, power_rating)
logos <- scoreboard %>%
distinct(home_team, home_team_logo)
acc_teams <- c("Clemson", "Duke", "Louisville", "Florida St.", "Virginia Tech", "Georgia Tech",
"North Carolina", "Notre Dame", "Virginia", "Pittsburgh", "Boston College", "NC State", "Syracuse")
completed <- scoreboard %>%
filter(away_team %in% acc_teams & home_team %in% acc_teams)
completed <- rbind(completed[c(9,1,4,5,8)] %>% `names<-`(c("date", "team", "runs", "opponent", "opponent_runs")),
completed[c(9,5,8,1,4)] %>% `names<-`(c("date", "team", "runs", "opponent", "opponent_runs"))) %>%
mutate(win = runs > opponent_runs,
tie = runs == opponent_runs)
current_standings <- completed %>%
group_by(team) %>%
summarise(games = n(),
wins = sum(win),
ties = sum(tie),
losses = games - wins - ties,
record = paste0(wins,"-",losses,"-",ties))
remaining <- data.frame(team = c(rep("Clemson", 10), rep("Duke", 9), rep("Louisville",12), rep("Florida St.",13), rep("Virginia Tech",12), rep("Georgia Tech",12),
rep("North Carolina",12), rep("Notre Dame", 12), rep("Virginia",12), rep("Pittsburgh",15), rep("Boston College",15), rep("NC State",11), rep("Syracuse",11)),
opponent = c(rep("Florida St.",1), rep("NC State", 3), rep("Pittsburgh",3), rep("Virginia Tech", 3),
rep("Boston College",3), rep("Georgia Tech", 3), rep("Pittsburgh", 3),
rep("Notre Dame",3), rep("Virginia",3), rep("Boston College",3), rep("Florida St.",3),
rep("Clemson",1), rep("Virginia",3), rep("Virginia Tech",3), rep("Notre Dame",3), rep("Louisville",3),
rep("Virginia",3), rep("Notre Dame",3), rep("Florida St.",3), rep("Clemson",3),
rep("Boston College",3), rep("Pittsburgh",3), rep("Duke",3), rep("North Carolina",3),
rep("Pittsburgh",3), rep("Syracuse",3), rep("NC State",3), rep("Georgia Tech",3),
rep("Louisville",3), rep("Virginia Tech",3), rep("Boston College",3), rep("Florida St.",3),
rep("Virginia Tech",3), rep("Florida State",3), rep("Louisville",3), rep("Syracuse", 3),
rep("North Carolina",3), rep("Georgia Tech",3), rep("Clemson",3), rep("Duke",3), rep("NC State",3),
rep("Georgia Tech",3), rep("Duke",3), rep("Notre Dame",3), rep("Louisville",3), rep("Syracuse",3),
rep("Syracuse",2), rep("Clemson",3), rep("North Carolina",3), rep("Pittsburgh",3),
rep("NC State",2), rep("North Carolina",3), rep("Boston College",3), rep("Virginia",3)))
remaining_sos <- remaining %>%
merge(ratings, by.x = "opponent", by.y = "team") %>%
group_by(team) %>%
summarise(avg_rating = mean(power_rating)) %>%
ungroup() %>%
mutate(rank = rank(-avg_rating)) %>%
select(team, rank)
simulate_seasons <- function(probs, n_sims){
results <- data.frame()
for(sim in 1:n_sims){
for(i in 1:nrow(probs)){
probs$win[i] <- sample(c(T,F), prob = c(probs$prob[i], 1 - probs$prob[i]))
}
probs_upd <- rbind(probs %>% select(team, opponent, win),
completed %>% select(team, opponent, win)) %>%
mutate(sim_id = sim)
results <- rbind(results, probs_upd)
if(sim %% 100 == 0) print(sim)
}
return(results)
}
get_standings <- function(results){
records <- results %>%
group_by(team, sim_id) %>%
summarise(games = n(),
wins = sum(win),
losses = games - wins,
win_perc = wins / games) %>%
ungroup() %>%
group_by(sim_id) %>%
mutate(rank = rank(-win_perc, ties.method = "random")) %>%
ungroup()
records_upd <- records %>%
group_by(team) %>%
summarise(win = mean(rank == 1),
top3 = mean(rank <= 3),
top6 = mean(rank <= 6),
make_tournament = mean(rank <= 10))
#print(mean(records %>% filter(rank  == 10) %>% pull(wins)))
return(list(records_upd, records))
}
probs <- remaining %>%
select(team, opponent) %>%
merge(ratings, by.x = "team", by.y = "team") %>%
rename(team1_rating = power_rating) %>%
merge(ratings, by.x = "opponent", by.y = "team") %>%
rename(team2_rating = power_rating)
load(file = "power_rating_model.RDA")
probs$prob = predict(model, probs, type = "response")
results <- simulate_seasons(probs,num_sims)
num_sims = 1
results <- simulate_seasons(probs,num_sims)
standings <- get_standings(results)$records_upd
get_standings(results)
get_standings(results)[[1]]
library(softballR)
library(tidyverse)
setwd("~/Desktop/Projects/softball-projects/ACC Softball Analytics/sim_season")
source("get_current_rpi.R")
source("get_power_ratings.R")
source("acc_season_sims.R")
scoreboard <- load_ncaa_scoreboard(2023)
standings <- get_power_ratings(scoreboard)
results <- sim_season(scoreboard, 1)
table <- results[[1]]
records <- results[[2]]
table
View(records)
library(softballR)
library(tidyverse)
setwd("~/Desktop/Projects/softball-projects/ACC Softball Analytics/sim_season")
source("get_current_rpi.R")
source("get_power_ratings.R")
source("acc_season_sims.R")
scoreboard <- load_ncaa_scoreboard(2023)
standings <- get_power_ratings(scoreboard)
results <- sim_season(scoreboard, 1000)
table <- results[[1]]
records <- results[[2]]
table
results %>% filter(rank == 10)
records %>% filter(rank == 10)
records %>% filter(rank == 10) %>% summarise(mean(wins))
View(records)
records %>% filter(rank == 10) %>% summarise(max(wins))
records %>% filter(rank == 10) %>% plot(wins)
last <- records %>% filter(rank == 10)
plot(last$wins)
hist(last$wins)
library(softballR)
library(tidyverse)
setwd("~/Desktop/Projects/softball-projects/ACC Softball Analytics/sim_season")
source("get_current_rpi.R")
source("get_power_ratings.R")
source("acc_season_sims.R")
scoreboard <- load_ncaa_scoreboard(2023)
View(scoreboard)
