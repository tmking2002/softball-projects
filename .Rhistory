select(player, inning_runs) %>%
filter(!str_detect(player, "H: |R: ")) %>%
mutate(game_id = id)
print(nrow(filtered))
return(filtered)
}
games <- data.frame()
for(i in 1:length(url_exts)){
games <- rbind(games, get_pbp(url_exts[i]))
}
stats <- games %>%
mutate(player = word(player, 2, 2)) %>%
group_by(player) %>%
summarise(ab = n(),
runs_generated = sum(inning_runs),
avg_runs_generated = runs_generated / ab) %>%
ungroup() %>%
mutate(`+/-` = avg_runs_generated - mean(games$inning_runs)) %>%
filter(ab >= 10) %>%
arrange(desc(`+/-`))
}
team_id <- teams$school_id[1]
tic()
stats <- get_runs_generated(team_id)
rlang::last_error()
team_name <- teams$school[1]
team_id <- teams$school_id[1]
team_name <- teams$school[1]
team_site <- glue("https://stats.ncaa.org/teams/{team_id}") %>%
readLines()
games <- grep("http://web2.ncaa.org/ncaa_style/img/All_Logos", team_site)[2:56] + 3
games <- games[which(str_detect(team_site[games],"BOX_SCORE_WINDOW"))]
url_exts <- c()
for(i in 1:length(games)){
current_ext <- as.numeric(str_split(team_site[games[i]],"          <a target=\"BOX_SCORE_WINDOW\" class=\"skipMask\" href=\"/contests/|/box_score")[[1]][2])
current_html <- glue("https://stats.ncaa.org/contests/{current_ext}/box_score") %>% readLines()
url <- current_html[grep("Play by Play",current_html)[1]]
url_upd <- as.numeric(str_split(url, "\t\t\t<a href=\"/game/play_by_play/|\">Play by Play</a>")[[1]][2])
url_exts <- append(url_exts, url_upd)
}
possible_events <- c("struck out",
"grounded out",
"flied out",
"walked",
"fouled out",
"popped up",
"singled",
"doubled",
"tripled",
"homered")
get_pbp <- function(id){
print(id)
raw <- glue("https://stats.ncaa.org/game/play_by_play/{id}") %>%
read_html() %>%
html_table()
upd <- raw[(5:length(raw))][c(F,T)]
df <- do.call(rbind, upd)
names(df) <- df[1,]
filtered <- df %>%
rename(events = ) %>%
select(events) %>%
mutate(new_inning = events == "NC State",
inning = cumsum(new_inning)) %>%
filter(str_detect(events, paste(possible_events, collapse = "|")) | str_detect(events, "\\(|H:")) %>%
select(-new_inning) %>%
group_by(inning) %>%
mutate(player = word(events, 1, 2),
inning_stats = last(events),
inning_runs = ifelse(!str_detect(inning_stats, "R:"), 0, as.numeric(str_remove(regmatches(inning_stats, regexpr("R:\\s+(\\d+)", inning_stats)),"R: ")))) %>%
ungroup() %>%
select(player, inning_runs) %>%
filter(!str_detect(player, "H: |R: ")) %>%
mutate(game_id = id)
print(nrow(filtered))
return(filtered)
}
id = url_exts[1]
raw <- glue("https://stats.ncaa.org/game/play_by_play/{id}") %>%
read_html() %>%
html_table()
upd <- raw[(5:length(raw))][c(F,T)]
df <- do.call(rbind, upd)
names(df) <- df[1,]
View(df)
library(softballR)
library(magrittr)
library(gt)
teams <- get_ncaa_teams(2023)
pbp <- get_ncaa_pbp(teams %>% dplyr::filter(team_name == "Louisville") %>% dplyr::pull(team_id))
devtools::install_github("tmking2002/softballR")
library(softballR)
library(magrittr)
library(gt)
teams <- get_ncaa_teams(2023)
teams <- softballR::get_ncaa_teams(2023)
?softballR
??softballR
set.seed(100)
vec <- runif(10)
pseudo <- vec %*% (t(vec) %/% norm(vec,"2")^2)
View(pseudo)
(t(vec) %/% norm(vec,"2")^2)
norm(vec,"2")^2
t(vec)
t(vec)
vec
t(vec)
pseudo <- vec %*% (t(vec) %*% 1/norm(vec,"2")^2)
pseudo <- vec %*% (t(vec) %*% (1 / norm(vec,"2")^2))
pseudo <- vec %*% (t(vec) %*% (1 %/% norm(vec,"2")^2))
norm(vec,"2")^2
pseudo <- vec %*% (t(vec) / norm(vec,"2")^2)
(t(vec) / norm(vec,"2")^2)
set.seed(100)
vec <- runif(10)
pseudo <- vec %*% (t(vec) / norm(vec,"2")^2)
pseudo %*% vec
vec %*% pseudo
set.seed(100)
vec <- runif(10)
pseudo <- vec %*% (t(vec) / norm(vec,"2")^2)
vec %*% pseudo
vec
(t(vec) / norm(vec,"2")^2)
pseudo <- vec %*% (t(vec) / norm(vec,"2")^2)
pseudo <-  (t(vec) / norm(vec,"2")^2) %>% vec
pseudo <-  (t(vec) / norm(vec,"2")^2) %*% vec
pseudo <-  vec %*% (t(vec) / norm(vec,"2")^2)
norm(vec,"2")^2
t(vec)
set.seed(100)
vec <- t(runif(10))
pseudo <-  vec %*% (t(vec) / norm(vec,"2")^2)
pseudo %*% vec
vec %*% pseudo
set.seed(100)
vec <- t(runif(10))
pseudo <-  vec %*% (t(vec) / norm(vec,"2")^2)
vec %*% pseudo
set.seed(100)
vec <- runif(10)
pseudo <-  vec %*% (t(vec) / norm(vec,"2")^2)
vec %*% pseudo
(sqrt(vec)^2)
(sqrt(sum(vec))^2)
set.seed(100)
vec <- runif(10)
pseudo <-  vec %*% (t(vec) / (sqrt(sum(vec))^2)^2)
vec %*% pseudo
pseudo %*% vec
set.seed(100)
vec <- runif(3)
pseudo <-  vec %*% (t(vec) / (sqrt(sum(vec))^2)^2)
vec %*% pseudo
pseudo %*% vec
(sqrt(sum(vec))^2)^2
t(vec)
(t(vec) / (sqrt(sum(vec))^2)^2)
View(pseudo)
set.seed(100)
vec <- t(runif(3))
pseudo <-  vec %*% (t(vec) / (sqrt(sum(vec))^2)^2)
vec %*% pseudo
sum(vec)
(sqrt(sum(vec))^2)
set.seed(100)
vec <- runif(3)
pseudo <-  vec %*% (t(vec) / sum(abs(vec))^2)
vec %*% pseudo
pseudo %*% vec
set.seed(100)
vec <- runif(3)
pseudo <-  (t(vec) / sum(abs(vec))^2)
vec %*% pseudo
pseudo %*% vec
set.seed(100)
vec <- runif(3)
pseudo <-  t(vec) / norm(vec, "2")^2
vec %*% pseudo
pseudo %*% vec
set.seed(100)
vec <- runif(3)
pseudo <-  t(vec) / norm(vec, "2")^2
vec %*% t(pseudo)
pseudo %*% vec
t(vec) %/% t(vec)
vec %*% t(vec)
t(vec) / t(vec)
a <- t(vec) / t(vec)
b <- vec %*% a
c <- b %*% vec
a <- vec %*% t(vec)
b <- a %/% t(vec)
c <- b %*% vec
(vec %*% t(vec)) / (t(vec) %*% vec)
(vec %*% t(vec)) %/* (t(vec) %*% vec)
(vec %*% t(vec)) %/% (t(vec) %*% vec)
(t(vec) %*% vec)
(vec %*% t(vec))
vec %*% t(pseudo)
set.seed(100)
vec <- runif(3)
pseudo <-  t(vec) / norm(vec, "2")^2
vec %*% t(pseudo)
pseudo %*% vec
t(vec) / (t(vec) %*% vec)
(t(vec) %*% vec)
vec %*% t(vec) / (t(vec) %*% vec)
(vec %*% t(vec)) / (t(vec) %*% vec)
(vec %*% t(vec))
(t(vec) %*% vec)
vec %*% (t(vec) / (t(vec) %*% vec))
t(vec)
(t(vec) %*% vec))
t(vec) / (t(vec) %*% vec)
vec %*% (vec / (t(vec) %*% vec))
(vec / (t(vec) %*% vec))
vec %*% (vec / (t(vec) %*% vec))
(vec / (t(vec) %*% vec))
(vec / (t(vec) %*% vec))
(vec / (t(vec) %*% vec)) == t(vec)
(vec / (t(vec) %*% vec)) == vec
(vec / (t(vec) %*% vec))
vec
(t(vec) / (t(vec) %*% vec))
set.seed(100)
set.seed(100)
vec <- matrix(runif(3), nrow=3, ncol=1)
pseudo <-  t(vec) / norm(vec, "2")^2
vec %*% (vec / (t(vec) %*% vec))
vec %*% (vec / (t(vec) %*% vec))
vec %*% (t(vec) / (t(vec) %*% vec))
(t(vec) %*% vec)
t(vec)
1 / t(vec) %*% vec)
1 / (t(vec) %*% vec)
vec %*% (t(vec) %*% (1 / (t(vec) %*% vec)))
test1 <- sum(log((2 * x / theta) * exp((-x ^ 2) / theta)))
set.seed(123)
n <- 100
x <- runif(n)
theta <- runif(1)
test1 <- sum(log((2 * x / theta) * exp((-x ^ 2) / theta)))
test2 <- sum((log(2 * x) - log(theta)) + (-x ^ 2) / theta))
test2 <- sum((log(2 * x) - log(theta)) + ((-x ^ 2) / theta))
test3 <- sum(log(2 * x)) + sum(log(theta)) + sum((-x ^ 2) / theta)
test3 <- sum(log(2 * x)) - sum(log(theta)) + sum((-x ^ 2) / theta)
sum(log(2 * x))
sum(log(theta))
sum((-x ^ 2) / theta)
test3 <- sum(log(2 * x)) - sum(log(theta)) - sum((x ^ 2) / theta)
test3 <- sum(log(2 * x)) - sum(log(theta) + sum((-x ^ 2) / theta))
test3 <- sum(log(2 * x)) - sum(log(theta) + (-x ^ 2) / theta))
test3 <- sum(log(2 * x)) - sum(log(theta) + (-x ^ 2) / theta)
test3 <- sum(log(2 * x)) - log(theta) + (-x ^ 2) / theta)
test3 <- sum(log(2 * x) - log(theta) + (-x ^ 2) / theta)
test3 <- sum(log(2 * x) - log(theta)) + sum((-x ^ 2) / theta)
test3 <- sum(log(2 * x)) - sum(log(theta) + sum(-x ^ 2) / theta))
test3 <- sum(log(2 * x)) - sum(log(theta)) + sum(-x ^ 2) / theta)
test3 <- sum(log(2 * x)) - sum(log(theta)) + sum((-x ^ 2) / theta)
test3 <- sum(log(2 * x)) - sum(log(theta)) + (1 / theta) * sum((-x ^ 2))
test3 <- sum(log(2 * x)) - sum(log(theta)) + (1 / theta) * sum((x ^ 2))
sum((-x ^ 2))
sum((log(2 * x) - log(theta)))
sum((log(2 * x))) - sum(log(theta))
test3 <- sum((log(2 * x))) - sum(log(theta)) + sum(((-x ^ 2) / theta))
sum(((-x ^ 2) / theta) - log(theta))
- sum(log(theta)) + sum(((-x ^ 2) / theta))
library(softballR)
library(tidyverse)
library(gt)
library(gtExtras)
setwd("~/Desktop/Projects/softball-projects")
source("Get Current RPI.R")
library(lubridate)
library(dplyr)
library(rvest)
library(magrittr)
library(stringr)
get_ncaa_scoreboard <- function(date){
if(as.Date(date) >= Sys.Date()){
stop("Invalid Date")
}
if(class(date) != "Date"){
year <- try(strsplit(date, "-")[[1]][1])
month <- try(strsplit(date, "-")[[1]][2])
day <- try(strsplit(date, "-")[[1]][3])
} else{
month <- lubridate::month(date)
day <- lubridate::day(date)
year <- lubridate::year(date)
}
division_id <- dplyr::case_when(year == 2023 ~ 18101,
year == 2022 ~ 17840,
year == 2021 ~ 15620,
year == 2020 ~ 15220,
year == 2019 ~ 16820)
test <- paste0("https://stats.ncaa.org/season_divisions/",division_id,"/livestream_scoreboards?utf8=%E2%9C%93&season_division_id=&game_date=",month,"%2F",day,"%2F",year) %>%
rvest::read_html() %>%
rvest::html_text() %>%
strsplit("Box Score") %>%
magrittr::extract2(1) %>%
strsplit("\\n")
for(i in 1:length(test)){
for(j in 1:length(test[[i]])){
test[[i]][j] <- test[[i]][j] %>% trimws()
}
test[[i]] <- test[[i]][nzchar(test[[i]])]
}
start_loc <- grep("Attendance",test[[1]])
test[[1]] <- test[[1]][(start_loc+1):length(test[[1]])]
assemble_df <- function(game_vector){
if("Canceled" %in% game_vector){
num_canceled <- length(grep("Canceled",game_vector))
date_locs <- grep(paste(month,day,year,sep = "/"),game_vector)
game_vector <- game_vector[-c(1:(date_locs[num_canceled+1]-1))]
}
date <- game_vector[1] %>% stringr::str_remove_all(" \\(1\\)| \\(2\\)")
game_vector <- game_vector[!stringr::str_detect(game_vector, " \\(1\\)| \\(2\\)")]
team1 <- game_vector[grep("\\(",game_vector)[1]] %>% strsplit(" \\(") %>% magrittr::extract2(1) %>% magrittr::extract(1)
team2 <- game_vector[grep("\\(",game_vector)[2]] %>% strsplit(" \\(") %>% magrittr::extract2(1) %>% magrittr::extract(1)
team1_runs <- game_vector[grep("Final",game_vector) - 1] %>% as.numeric
team2_runs <- game_vector[length(game_vector)] %>% as.numeric
upd_game_vector <- game_vector[!(game_vector) %in%
c(date, team1, team2, team1_runs, team2_runs, "Final")]
upd_game_vector <- upd_game_vector[-c(length(upd_game_vector), length(upd_game_vector) - 1)]
game_df <- data.frame(date, team1, team2, team1_runs, team2_runs)
return(game_df)
}
games_df <- data.frame()
for(i in 1:(length(test)-1)){
games_df <- rbind(games_df, assemble_df(test[[i]]))
}
return(games_df)
}
get_ncaa_season_scoreboard <- function(season){
options(warn = -1)
s <- try(as.numeric(season))
if("try-error" %in% class(s) || is.na(s) || s < 2022 || s > 2023){
stop("Invalid Season")
}
seasons <- data.frame(season = 2015:2023,
start_date = c("2015-02-05","2016-02-11","2017-02-09","2018-02-08","2019-02-07","2020-02-06","2021-02-11","2022-02-10","2023-02-09"),
end_date = c("2015-06-03","2016-06-08","2017-06-07","2018-06-06","2019-06-04","2020-03-12","2021-06-10","2022-06-09","2023-06-09")) #Go back and fix after season
start_date <- seasons %>% dplyr::filter(season == s) %>% dplyr::select(start_date) %>% as.character() %>% as.Date()
end_date <- seasons %>% dplyr::filter(season == s) %>% dplyr::select(end_date) %>% as.character() %>% as.Date()
scoreboard <- data.frame()
for(i in seq(start_date,min(end_date,Sys.Date()),1)){
date = as.character(as.Date(i,origin = "1970-01-01"))
temp <- try(get_ncaa_scoreboard(date),silent = TRUE)
if("try-error" %in% class(temp)){
next
}
scoreboard <- rbind(scoreboard,temp)
}
return(scoreboard)
}
scoreboard <- get_ncaa_season_scoreboard(2023)
View(scoreboard)
setwd("~/Desktop/softballR-data")
saveRDS(object = scoreboard, file = "data/ncaa_scoreboard_2023.RDS")
setwd("~/Desktop/Projects/softball-projects")
source("Get Current RPI.R")
scoreboard_2022 <- load_espn_scoreboard(2022)
scoreboard_2023 <- readRDS("~/Desktop/softballR-data/data/ncaa_scoreboard_2023.RDS")
logos <- scoreboard_2022 %>%
distinct(home_team_display_name, home_team_logo)
rpi_2022 <- read_csv("2022 RPI Rankings.csv")
rpi_2023 <- get_current_rpi(scoreboard_2023)
scoreboard_train <- scoreboard_2022 %>%
filter(description == "Final") %>%
mutate(home_win = as.numeric(home_team_runs) > as.numeric(away_team_runs)) %>%
left_join(rpi_2022 %>% rename("home_rank" = "Rank"), by = c("home_team_display_name" = "School")) %>%
left_join(rpi_2022 %>% rename("away_rank" = "Rank"), by = c("away_team_display_name" = "School")) %>%
mutate(log_home_rank = log(home_rank),
log_away_rank = log(away_rank),
rank_diff = home_rank - away_rank,
log_rank_diff = log_home_rank - log_away_rank)
model <- glm(home_win ~ log_rank_diff, data = scoreboard_train, family = "binomial")
start_date <- as.Date("2023-03-20")
end_date <- as.Date("2023-03-26")
scoreboard_test <- scoreboard_2023 %>%
mutate(date = as.Date(paste0(word(date,3,sep="/"),"-",word(date,1,sep="/"),"-",word(date,2,sep="/")))) %>%
filter(date < end_date & date >= start_date) %>%
mutate(team1_win = as.numeric(team1_runs) > as.numeric(team2_runs)) %>%
left_join(rpi_2023 %>% rename("team1_rank" = "rpi_rank"), by = c("team1" = "team_name")) %>%
left_join(rpi_2023 %>% rename("team2_rank" = "rpi_rank"), by = c("team2" = "team_name")) %>%
mutate(log_team1_rank = log(team1_rank),
log_team2_rank = log(team2_rank),
rank_diff = team1_rank - team2_rank,
log_rank_diff = log_team1_rank - log_team2_rank)
scoreboard_test$likelihood <- predict(model, scoreboard_test, type = "response")
scoreboard_test$resid <- scoreboard_test$team1_win - scoreboard_test$likelihood
scoreboard_test <- scoreboard_test %>%
mutate(team1_runs = as.numeric(team1_runs),
team2_runs = as.numeric(team2_runs),
score = paste(team1_runs, team2_runs, sep = "-"),
rank_diff = abs(rank_diff),
log_rank_diff = abs(log_rank_diff)) %>%
merge(logos, by.x = "team1", by.y = "home_team_display_name") %>%
rename(team1_logo = home_team_logo) %>%
merge(logos, by.x = "team2", by.y = "home_team_display_name") %>%
rename(team2_logo = home_team_logo)
table <- scoreboard_test %>%
arrange(desc(abs(resid))) %>%
head(n = 5) %>%
select(date,team1_logo, team1, team2_logo, team2, team1_runs, team2_runs, score, rank_diff, log_rank_diff) %>%
gt() %>%
fmt_date(date, date_style = "Md") %>%
cols_hide(c(team1_runs,team2_runs)) %>%
fmt_number(log_rank_diff, decimals = 2) %>%
gt_img_rows(team1_logo) %>%
gt_img_rows(team2_logo) %>%
cols_label(date = "Date",
team1_logo = "",
team1 = "",
team2_logo = "",
team2 = "",
score = "Score",
rank_diff = "Raw RPI Diff.",
log_rank_diff = "Log RPI Diff.") %>%
tab_style(cell_borders(sides = "right",
style = "dashed",
color = "grey"),
cells_body(columns = c(date, team1, team2),
rows = everything())) %>%
tab_style(style = cell_fill(color = "#CDEBC5"),
locations = cells_body(
columns = c(team1, team1_logo),
rows = team1_runs > team2_runs
)) %>%
tab_style(style = cell_fill(color = "#CDEBC5"),
locations = cells_body(
columns = c(team2, team2_logo),
rows = team1_runs < team2_runs
)) %>%
gt_theme_espn() %>%
tab_header(title = "Biggest NCAA Softball Upsets",
subtitle = paste0(format(start_date, "%m/%d")," - ",format(end_date, "%m/%d"))) %>%
opt_align_table_header(align = "center") %>%
tab_options(heading.title.font.weight = "bold",
heading.title.font.size = "24px")
table
View(scoreboard_test)
View(scoreboard_2023)
scoreboard_test <- scoreboard_2023 %>%
mutate(date = as.Date(paste0(word(date,3,sep="/"),"-",word(date,1,sep="/"),"-",word(date,2,sep="/")))) %>%
filter(date <= end_date & date >= start_date) %>%
mutate(team1_win = as.numeric(team1_runs) > as.numeric(team2_runs)) %>%
left_join(rpi_2023 %>% rename("team1_rank" = "rpi_rank"), by = c("team1" = "team_name")) %>%
left_join(rpi_2023 %>% rename("team2_rank" = "rpi_rank"), by = c("team2" = "team_name")) %>%
mutate(log_team1_rank = log(team1_rank),
log_team2_rank = log(team2_rank),
rank_diff = team1_rank - team2_rank,
log_rank_diff = log_team1_rank - log_team2_rank)
scoreboard_test$likelihood <- predict(model, scoreboard_test, type = "response")
scoreboard_test$resid <- scoreboard_test$team1_win - scoreboard_test$likelihood
scoreboard_test <- scoreboard_test %>%
mutate(team1_runs = as.numeric(team1_runs),
team2_runs = as.numeric(team2_runs),
score = paste(team1_runs, team2_runs, sep = "-"),
rank_diff = abs(rank_diff),
log_rank_diff = abs(log_rank_diff)) %>%
merge(logos, by.x = "team1", by.y = "home_team_display_name") %>%
rename(team1_logo = home_team_logo) %>%
merge(logos, by.x = "team2", by.y = "home_team_display_name") %>%
rename(team2_logo = home_team_logo)
table <- scoreboard_test %>%
arrange(desc(abs(resid))) %>%
head(n = 5) %>%
select(date,team1_logo, team1, team2_logo, team2, team1_runs, team2_runs, score, rank_diff, log_rank_diff) %>%
gt() %>%
fmt_date(date, date_style = "Md") %>%
cols_hide(c(team1_runs,team2_runs)) %>%
fmt_number(log_rank_diff, decimals = 2) %>%
gt_img_rows(team1_logo) %>%
gt_img_rows(team2_logo) %>%
cols_label(date = "Date",
team1_logo = "",
team1 = "",
team2_logo = "",
team2 = "",
score = "Score",
rank_diff = "Raw RPI Diff.",
log_rank_diff = "Log RPI Diff.") %>%
tab_style(cell_borders(sides = "right",
style = "dashed",
color = "grey"),
cells_body(columns = c(date, team1, team2),
rows = everything())) %>%
tab_style(style = cell_fill(color = "#CDEBC5"),
locations = cells_body(
columns = c(team1, team1_logo),
rows = team1_runs > team2_runs
)) %>%
tab_style(style = cell_fill(color = "#CDEBC5"),
locations = cells_body(
columns = c(team2, team2_logo),
rows = team1_runs < team2_runs
)) %>%
gt_theme_espn() %>%
tab_header(title = "Biggest NCAA Softball Upsets",
subtitle = paste0(format(start_date, "%m/%d")," - ",format(end_date, "%m/%d"))) %>%
opt_align_table_header(align = "center") %>%
tab_options(heading.title.font.weight = "bold",
heading.title.font.size = "24px")
table
View(rpi_2023)
gtsave(table, "Biggest Upsets.png")
softballR::get_rankings("RPI")
?get_rankings
softballR::get_rankings("USA Today")
