group_by(team, sim_id) %>%
summarise(games = n(),
wins = sum(win),
losses = games - wins,
win_perc = wins / games) %>%
ungroup() %>%
group_by(sim_id) %>%
mutate(rank = rank(-win_perc), ties.method = "random") %>%
ungroup()
records_upd <- records %>%
group_by(team) %>%
summarise(win = mean(rank == 1),
top3 = mean(rank <= 3),
top5 = mean(rank <= 5),
make_tournament = mean(rank <= 10))
#print(mean(records %>% filter(rank  == 10) %>% pull(wins)))
return(records_upd)
}
probs <- remaining %>%
select(team, opponent) %>%
merge(rpi, by.x = "team", by.y = "team_name") %>%
rename(team_rank = rpi_rank) %>%
merge(rpi, by.x = "opponent", by.y = "team_name") %>%
rename(opponent_rank = rpi_rank) %>%
mutate(log_rank_diff = log(team_rank) - log(opponent_rank))
load(file = "rpi_model.RDA")
setwd("~/Desktop/Projects/softball-projects")
load(file = "rpi_model.RDA")
probs$prob = predict(model, probs, type = "response")
results <- simulate_seasons(probs,1000)
standings <- get_standings(results)
table <- standings %>%
merge(logos, by.x = "team", by.y = "home_team_display_name") %>%
merge(current_standings %>% select(team, record)) %>%
merge(remaining_sos, by = "team") %>%
select(home_team_logo, team, record, rank, win, top3, top5, make_tournament) %>%
arrange(desc(win), desc(top3), desc(top5), desc(make_tournament)) %>%
gt() %>%
gt_img_rows(home_team_logo) %>%
cols_label(home_team_logo = "",
team = "",
rank = "Remaining SOS",
win = "Win",
top3 = "Top 3",
top5 = "Top 5",
make_tournament = "Make Tournament") %>%
fmt_percent(5:8, decimals = 1) %>%
data_color(columns = c(win, top3, top5, make_tournament),
colors = scales::col_numeric(
palette = c("#FF6962", "#77DE78"),
domain = c(0,1)
)) %>%
data_color(columns = rank,
colors = scales::col_numeric(
palette = c("#FF6962", "#77DE78"),
domain = c(1,13)
)) %>%
gt_theme_espn() %>%
cols_align(align = "center",
columns = 3:6) %>%
tab_header(title = "2023 ACC Softball Tournament Odds",
subtitle = "Based on 1000 Simulations of Remainder of Season") %>%
tab_footnote(footnote = "Through 3/30/23",
locations = cells_column_labels(columns = record)) %>%
opt_align_table_header(align = "center") %>%
tab_style(style = cell_borders(sides = "right",
weight = px(3)),
locations = cells_body(columns = 4)) %>%
tab_style(style = cell_borders(sides = "top",
weight = px(3)),
locations = cells_body(rows = 1))
gtsave(table, "~/Desktop/Projects/softball-projects/ACC Softball Analytics/ACC Rankings Predictions 4/2/23.png")
gtsave(table, "~/Desktop/Projects/softball-projects/ACC Softball Analytics/ACC Rankings Predictions 4_2.png")
table <- standings %>%
merge(logos, by.x = "team", by.y = "home_team_display_name") %>%
merge(current_standings %>% select(team, record)) %>%
merge(remaining_sos, by = "team") %>%
select(home_team_logo, team, record, rank, win, top3, top5, make_tournament) %>%
arrange(desc(win), desc(top3), desc(top5), desc(make_tournament)) %>%
gt() %>%
gt_img_rows(home_team_logo) %>%
cols_label(home_team_logo = "",
team = "",
rank = "Remaining SOS",
win = "Win",
top3 = "Top 3",
top5 = "Top 5",
make_tournament = "Make Tournament") %>%
fmt_percent(5:8, decimals = 1) %>%
data_color(columns = c(win, top3, top5, make_tournament),
colors = scales::col_numeric(
palette = c("#FF6962", "#77DE78"),
domain = c(0,1)
)) %>%
data_color(columns = rank,
colors = scales::col_numeric(
palette = c("#FF6962", "#77DE78"),
domain = c(1,13)
)) %>%
gt_theme_espn() %>%
cols_align(align = "center",
columns = 3:6) %>%
tab_header(title = "2023 ACC Softball Tournament Odds",
subtitle = "Based on 1000 Simulations of Remainder of Season") %>%
tab_footnote(footnote = "Through 4/2/23",
locations = cells_column_labels(columns = record)) %>%
opt_align_table_header(align = "center") %>%
tab_style(style = cell_borders(sides = "right",
weight = px(3)),
locations = cells_body(columns = 4)) %>%
tab_style(style = cell_borders(sides = "top",
weight = px(3)),
locations = cells_body(rows = 1))
gtsave(table, "~/Desktop/Projects/softball-projects/ACC Softball Analytics/ACC Rankings Predictions 4_2.png")
get_standings <- function(results){
records <- results %>%
group_by(team, sim_id) %>%
summarise(games = n(),
wins = sum(win),
losses = games - wins,
win_perc = wins / games) %>%
ungroup() %>%
group_by(sim_id) %>%
mutate(rank = rank(-win_perc), ties.method = "random") %>%
ungroup()
records_upd <- records %>%
group_by(team) %>%
summarise(win = mean(rank == 1),
top3 = mean(rank <= 3),
top5 = mean(rank <= 5),
make_tournament = mean(rank <= 10))
print(mean(records %>% filter(rank  == 10) %>% pull(wins)))
return(records_upd)
}
standings <- get_standings(results)
get_standings <- function(results){
records <- results %>%
group_by(team, sim_id) %>%
summarise(games = n(),
wins = sum(win),
losses = games - wins,
win_perc = wins / games) %>%
ungroup() %>%
group_by(sim_id) %>%
mutate(rank = rank(-win_perc), ties.method = "random") %>%
ungroup()
records_upd <- records %>%
group_by(team) %>%
summarise(win = mean(rank == 1),
top3 = mean(rank <= 3),
top5 = mean(rank <= 5),
make_tournament = mean(rank <= 10))
#print(mean(records %>% filter(rank  == 10) %>% pull(wins)))
return(records)
}
standings <- get_standings(results)
View(standings)
get_standings <- function(results){
records <- results %>%
group_by(team, sim_id) %>%
summarise(games = n(),
wins = sum(win),
losses = games - wins,
win_perc = wins / games) %>%
ungroup() %>%
group_by(sim_id) %>%
mutate(rank = rank(-win_perc, ties.method = "random")) %>%
ungroup()
records_upd <- records %>%
group_by(team) %>%
summarise(win = mean(rank == 1),
top3 = mean(rank <= 3),
top5 = mean(rank <= 5),
make_tournament = mean(rank <= 10))
#print(mean(records %>% filter(rank  == 10) %>% pull(wins)))
return(records_upd)
}
probs <- remaining %>%
select(team, opponent) %>%
merge(rpi, by.x = "team", by.y = "team_name") %>%
rename(team_rank = rpi_rank) %>%
merge(rpi, by.x = "opponent", by.y = "team_name") %>%
rename(opponent_rank = rpi_rank) %>%
mutate(log_rank_diff = log(team_rank) - log(opponent_rank))
standings <- get_standings(results)
table <- standings %>%
merge(logos, by.x = "team", by.y = "home_team_display_name") %>%
merge(current_standings %>% select(team, record)) %>%
merge(remaining_sos, by = "team") %>%
select(home_team_logo, team, record, rank, win, top3, top5, make_tournament) %>%
arrange(desc(win), desc(top3), desc(top5), desc(make_tournament)) %>%
gt() %>%
gt_img_rows(home_team_logo) %>%
cols_label(home_team_logo = "",
team = "",
rank = "Remaining SOS",
win = "Win",
top3 = "Top 3",
top5 = "Top 5",
make_tournament = "Make Tournament") %>%
fmt_percent(5:8, decimals = 1) %>%
data_color(columns = c(win, top3, top5, make_tournament),
colors = scales::col_numeric(
palette = c("#FF6962", "#77DE78"),
domain = c(0,1)
)) %>%
data_color(columns = rank,
colors = scales::col_numeric(
palette = c("#FF6962", "#77DE78"),
domain = c(1,13)
)) %>%
gt_theme_espn() %>%
cols_align(align = "center",
columns = 3:6) %>%
tab_header(title = "2023 ACC Softball Tournament Odds",
subtitle = "Based on 1000 Simulations of Remainder of Season") %>%
tab_footnote(footnote = "Through 4/2/23",
locations = cells_column_labels(columns = record)) %>%
opt_align_table_header(align = "center") %>%
tab_style(style = cell_borders(sides = "right",
weight = px(3)),
locations = cells_body(columns = 4)) %>%
tab_style(style = cell_borders(sides = "top",
weight = px(3)),
locations = cells_body(rows = 1))
gtsave(table, "~/Desktop/Projects/softball-projects/ACC Softball Analytics/ACC Rankings Predictions 4_2.png")
library(tidyverse)
library(softballR)
library(gt)
library(gtExtras)
gtsave(table, "~/Desktop/Projects/softball-projects/ACC Softball Analytics/ACC Rankings Predictions 4_2.png")
library(tidyverse)
scoreboard <- readRDS("~/Desktop/softballR-data/data/ncaa_scoreboard_2023.RDS")
runs_scored <- scoreboard %>%
pivot_longer(cols = 1:4)
runs_scored <- scoreboard %>%
pivot_longer(cols = 4:5)
View(runs_scored)
runs_scored <- scoreboard %>%
pivot_longer(cols = c(3,5))
names(scoreboard)
runs_scored <- rbind(scoreboard[c(1,2,4)], scoreboard[c(1,3,5)])
runs_scored <- rbind(scoreboard[c(1,2,4)] %>% `names<-`(c("date", "team", "runs")),
scoreboard[c(1,3,5)] %>% `names<-`(c("date", "team", "runs")))
View(runs_scored)
runs_scored <- rbind(scoreboard[c(1,2,4,3,5)] %>% `names<-`(c("date", "team", "runs", "opponent", "opponent_runs")),
scoreboard[c(1,3,5,2,4)] %>% `names<-`(c("date", "team", "runs", "opponent", "opponent_runs")))
View(runs_scored)
scoreboard_longer <- rbind(scoreboard[c(1,2,4,3,5)] %>% `names<-`(c("date", "team", "runs", "opponent", "opponent_runs")),
scoreboard[c(1,3,5,2,4)] %>% `names<-`(c("date", "team", "runs", "opponent", "opponent_runs")))
runs_scored <- scoreboard_longer %>%
group_by(team) %>%
summarise(runs_scored = mean(runs))
View(runs_scored)
runs_scored <- scoreboard_longer %>%
group_by(team) %>%
summarise(runs_scored = mean(runs)) %>%
filter(n() >= 10)
runs_scored <- scoreboard_longer %>%
group_by(team) %>%
summarise(runs_scored = mean(runs),
games = n()) %>%
filter(games >= 10) %>%
select(-games)
runs_scored <- scoreboard_longer %>%
group_by(team) %>%
summarise(runs_scored = mean(runs),
games = n()) %>%
filter(games >= 10) %>%
select(-games) %>%
drop_na()
runs_allowed <- scoreboard_longer %>%
group_by(team) %>%
summarise(runs_scored = mean(opponent_runs),
games = n()) %>%
filter(games >= 10) %>%
select(-games) %>%
drop_na()
View(runs_allowed)
best_offenses <- scoreboard_longer %>%
merge(runs_allowed, by = "team")
View(best_offenses)
best_offenses <- scoreboard_longer %>%
merge(runs_allowed, by.x = "opponent", by.y = "team")
runs_allowed <- scoreboard_longer %>%
group_by(team) %>%
summarise(runs_allowed = mean(opponent_runs),
games = n()) %>%
filter(games >= 10) %>%
select(-games) %>%
drop_na()
best_offenses <- scoreboard_longer %>%
merge(runs_allowed, by.x = "opponent", by.y = "team")
runs_scored <- scoreboard_longer %>%
group_by(team) %>%
summarise(avg_runs_scored = mean(runs),
games = n()) %>%
filter(games >= 10) %>%
select(-games) %>%
drop_na()
runs_allowed <- scoreboard_longer %>%
group_by(team) %>%
summarise(avg_runs_allowed = mean(opponent_runs),
games = n()) %>%
filter(games >= 10) %>%
select(-games) %>%
drop_na()
best_offenses <- scoreboard_longer %>%
merge(runs_allowed, by.x = "opponent", by.y = "team") %>%
mutate(diff = avg_runs_allowed - opponent_runs)
View(best_offenses)
best_offenses <- scoreboard_longer %>%
merge(runs_allowed, by.x = "opponent", by.y = "team") %>%
mutate(diff = avg_runs_allowed - runs)
best_offenses <- scoreboard_longer %>%
merge(runs_allowed, by.x = "opponent", by.y = "team") %>%
mutate(diff = avg_runs_allowed - runs) %>%
group_by(team) %>%
summarise(avg_diff = mean(diff)) %>%
ungroup()
best_offenses <- scoreboard_longer %>%
merge(runs_allowed, by.x = "opponent", by.y = "team") %>%
mutate(diff = avg_runs_allowed - runs) %>%
group_by(team) %>%
summarise(avg_diff = mean(diff),
games = n()) %>%
ungroup() %>%
filter(games >= 10) %>%
drop_na()
best_offenses <- scoreboard_longer %>%
merge(runs_allowed, by.x = "opponent", by.y = "team") %>%
mutate(diff = runs - avg_runs_allowed) %>%
group_by(team) %>%
summarise(avg_diff = mean(diff),
games = n()) %>%
ungroup() %>%
filter(games >= 10) %>%
drop_na()
best_defenses <- scoreboard_longer %>%
merge(runs_scored, by.x = "opponent", by.y = "team") %>%
mutate(diff = opponent_runs - avg_runs_scored) %>%
group_by(team) %>%
summarise(avg_diff = mean(diff),
games = n()) %>%
ungroup() %>%
filter(games >= 10) %>%
drop_na()
View(best_defenses)
best_defenses <- scoreboard_longer %>%
merge(runs_scored, by.x = "opponent", by.y = "team") %>%
mutate(diff = avg_runs_scored - opponent_runs) %>%
group_by(team) %>%
summarise(avg_diff = mean(diff),
games = n()) %>%
ungroup() %>%
filter(games >= 10) %>%
drop_na()
standings <- scoreboard_longer %>%
group_by(team) %>%
summarise(wins = sum(team1_runs > team2_runs),
losses = sum(team1_runs < team2_runs),
ties = sum(team1_runs == team2_runs),
win_perc = wins / (wins + losses))
standings <- scoreboard_longer %>%
group_by(team) %>%
summarise(wins = sum(runs > opponent_runs),
losses = sum(runs < opponent_runs),
ties = sum(runs == opponent_runs),
win_perc = wins / (wins + losses))
standings <- scoreboard_longer %>%
group_by(team) %>%
summarise(wins = sum(runs > opponent_runs),
losses = sum(runs < opponent_runs),
ties = sum(runs == opponent_runs),
win_perc = wins / (wins + losses)) %>%
filter(sum(wins, losses, ties) >= 10)
standings <- scoreboard_longer %>%
group_by(team) %>%
summarise(wins = sum(runs > opponent_runs),
losses = sum(runs < opponent_runs),
ties = sum(runs == opponent_runs),
win_perc = wins / (wins + losses),
games = sum(wins, losses, ties)) %>%
filter(games >= 10)
standings <- scoreboard_longer %>%
group_by(team) %>%
summarise(wins = sum(runs > opponent_runs),
losses = sum(runs < opponent_runs),
ties = sum(runs == opponent_runs),
win_perc = wins / (wins + losses),
games = sum(wins, losses, ties)) %>%
filter(games >= 10) %>%
drop_na()
best_offenses <- scoreboard_longer %>%
merge(runs_allowed, by.x = "opponent", by.y = "team") %>%
mutate(diff = runs - avg_runs_allowed) %>%
group_by(team) %>%
summarise(offensive_rating = mean(diff),
games = n()) %>%
ungroup() %>%
filter(games >= 10) %>%
drop_na()
best_defenses <- scoreboard_longer %>%
merge(runs_scored, by.x = "opponent", by.y = "team") %>%
mutate(diff = avg_runs_scored - opponent_runs) %>%
group_by(team) %>%
summarise(defensive_rating = mean(diff),
games = n()) %>%
ungroup() %>%
filter(games >= 10) %>%
drop_na()
View(best_offenses)
standings <- scoreboard_longer %>%
group_by(team) %>%
summarise(wins = sum(runs > opponent_runs),
losses = sum(runs < opponent_runs),
ties = sum(runs == opponent_runs),
win_perc = wins / (wins + losses),
games = sum(wins, losses, ties)) %>%
filter(games >= 10) %>%
drop_na() %>%
merge() %>%
merge(best_offenses, by = "team") %>%
merge(best_defense, by = "team")
standings <- scoreboard_longer %>%
group_by(team) %>%
summarise(wins = sum(runs > opponent_runs),
losses = sum(runs < opponent_runs),
ties = sum(runs == opponent_runs),
win_perc = wins / (wins + losses),
games = sum(wins, losses, ties)) %>%
filter(games >= 10) %>%
drop_na() %>%
merge() %>%
merge(best_offenses, by = "team") %>%
merge(best_defenses, by = "team")
standings <- scoreboard_longer %>%
group_by(team) %>%
summarise(wins = sum(runs > opponent_runs),
losses = sum(runs < opponent_runs),
ties = sum(runs == opponent_runs),
win_perc = wins / (wins + losses),
games = sum(wins, losses, ties)) %>%
filter(games >= 10) %>%
drop_na() %>%
merge() %>%
merge(best_offenses, by = "team")
standings <- scoreboard_longer %>%
group_by(team) %>%
summarise(wins = sum(runs > opponent_runs),
losses = sum(runs < opponent_runs),
ties = sum(runs == opponent_runs),
win_perc = wins / (wins + losses),
games = sum(wins, losses, ties)) %>%
filter(games >= 10) %>%
drop_na() %>%
merge(best_offenses, by = "team") %>%
merge(best_defenses, by = "team")
View(standings)
model <- lm(win_perc ~ offensive_rating + defensive_rating, data = standings)
summary(model)
source("~/Desktop/Projects/softball-projects/get_current_rpi.R")
rpi <- get_current_rpi(scoreboard) %>%
select(team_name, rpi_rank)
sos <- scoreboard_longer %>%
merge(rpi, by.x = "opponent", by.y = "team_name") %>%
group_by(team) %>%
summarise(avg_opponent_rpi = mean(rpi_rank)) %>%
ungroup() %>%
mutate(rank = rank(avg_opponent_rpi)) %>%
select(team, rank)
View(sos)
standings <- scoreboard_longer %>%
group_by(team) %>%
summarise(wins = sum(runs > opponent_runs),
losses = sum(runs < opponent_runs),
ties = sum(runs == opponent_runs),
win_perc = wins / (wins + losses),
games = sum(wins, losses, ties)) %>%
filter(games >= 10) %>%
drop_na() %>%
merge(best_offenses, by = "team") %>%
merge(best_defenses, by = "team") %>%
merge(sos, by = "team")
model <- lm(win_perc ~ offensive_rating + defensive_rating + rpi_rank, data = standings)
model <- lm(win_perc ~ offensive_rating + defensive_rating + rank, data = standings)
summary(model)
standings$power_rating <- predict(model, standings)
View(standings)
coef(model)
coef(model)$rank
coef(model)[rank]
coef(model)["rank"]
standings$power_rating <- predict(model, standings) - coef(model)["rank"] * standings$rank
View(standings)
names(standings)
standings <- scoreboard_longer %>%
group_by(team) %>%
summarise(wins = sum(runs > opponent_runs),
losses = sum(runs < opponent_runs),
ties = sum(runs == opponent_runs),
win_perc = wins / (wins + losses),
games = sum(wins, losses, ties)) %>%
filter(games >= 10) %>%
drop_na() %>%
merge(best_offenses, by = "team") %>%
merge(best_defenses, by = "team") %>%
merge(sos, by = "team") %>%
select(team, wins, losses, ties, win_perc, offensive_rating, defensive_rating, rank)
model <- lm(win_perc ~ offensive_rating + defensive_rating + rank, data = standings)
standings$power_rating <- predict(model, standings) - coef(model)["rank"] * standings$rank
View(standings)
