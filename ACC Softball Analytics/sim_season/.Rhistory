library(softballR)
library(tictoc)
library(tidyverse)
library(anytime)
options(warn = -1)
get_pitching_box <- function(id){
raw <- glue::glue("https://stats.ncaa.org/contests/{id}/box_score") %>%
readLines()
pitching_id <- raw[grep("\t   <a href=\"/game/box_score/", raw)] %>%
stringr::str_remove_all("\t   <a href=\"/game/box_score/|\">Box Score </a>")
raw <- glue::glue("https://stats.ncaa.org/game/box_score/{pitching_id}?year_stat_category_id=15021") %>%
rvest::read_html() %>%
rvest::html_table()
first_team <- as.character(raw[[6]][1,1])
second_team <- as.character(raw[[7]][1,1])
upd <- rbind(raw[[6]],raw[[7]]) %>%
`names<-`(raw[[6]][2,]) %>%
janitor::clean_names() %>%
dplyr::filter(!(player %in% c(first_team, second_team,"Player","Totals")))
upd$team <- ifelse(upd$player %in% raw[[6]]$X1, first_team, second_team)
upd$opponent <- ifelse(upd$team == first_team, second_team, first_team)
upd[upd == ""] <- "0"
upd[] <- lapply(upd, gsub, pattern="/", replacement="")
upd <- upd %>%
dplyr::mutate(across(3:26, as.numeric)) %>%
dplyr::filter(ip > 0) %>%
dplyr::mutate(game_id = id)
return(upd)
}
get_hitting_box <- function(id){
raw <- glue::glue("https://stats.ncaa.org/contests/{id}/box_score") %>%
rvest::read_html() %>%
rvest::html_table()
first_team <- as.character(raw[[6]][1,1])
second_team <- as.character(raw[[7]][1,1])
upd <- rbind(raw[[6]],raw[[7]]) %>%
`names<-`(raw[[6]][2,]) %>%
janitor::clean_names() %>%
dplyr::filter(!(player %in% c(first_team, second_team,"Player","Totals")))
upd$team <- ifelse(upd$player %in% raw[[6]]$X1, first_team, second_team)
upd$opponent <- ifelse(upd$team == first_team, second_team, first_team)
upd[upd == ""] <- "0"
upd <- upd %>%
dplyr::mutate(across(3:26, as.numeric)) %>%
dplyr::mutate(game_id = id)
return(upd)
}
curr_hitting_box <- readRDS("d1_hitting_box_scores_2023.RDS")
setwd("~/Projects/tmking2002.github.io/projects/top_players")
curr_hitting_box <- readRDS("d1_hitting_box_scores_2023.RDS")
curr_pitching_box <- readRDS("d1_pitching_box_scores_2023.RDS")
scoreboard <- load_ncaa_scoreboard(2023, division = "D1") %>%
distinct(game_id, game_date)
most_recent <- min(c(max(anydate(curr_hitting_box$game_date)),
max(anydate(curr_pitching_box$game_date))))
game_ids <- scoreboard %>% filter(anydate(game_date) > most_recent) %>%  pull(game_id) %>% sort
get_ncaa_hitter_player_box <- function(game_id){
i <<- i + 1
hitting <- try(get_hitting_box(game_id))
if(i %% 100 == 0) {toc(); tic(i+100)}
return(hitting)
}
get_ncaa_pitcher_player_box <- function(game_id){
i <<- i + 1
pitching <- try(get_pitching_box(game_id))
if(i %% 100 == 0) {toc(); tic(i+100)}
return(pitching)
}
i <- 0
tic(100)
box <- do.call(rbind, lapply(X = game_ids, FUN = get_ncaa_hitter_player_box))
toc()
box <- box %>%
filter(!str_detect(player,"Error : Document is empty|subscript out of bounds|Timeout was reached")) %>%
merge(scoreboard, by = "game_id")
hitting_box <- rbind(curr_hitting_box, box) %>%
distinct()
saveRDS(object = hitting_box, file = "d1_hitting_box_scores_2023.RDS")
i <- 0
tic(100)
box <- do.call(rbind, lapply(X = game_ids, FUN = get_ncaa_pitcher_player_box))
toc()
box <- box %>%
filter(!str_detect(player,"Error : Document is empty|subscript out of bounds|Timeout was reached")) %>%
merge(scoreboard, by = "game_id")
pitching_box <- rbind(curr_pitching_box, box) %>%
distinct()
saveRDS(object = pitching_box, file = "d1_pitching_box_scores_2023.RDS")
library(softballR)
library(tidyverse)
setwd("~/Projects/softball-projects/ACC Softball Analytics/sim_season")
source("get_current_rpi.R")
source("get_power_ratings.R")
source("acc_season_sims.R")
scoreboard <- load_ncaa_scoreboard(2023)
standings <- get_power_ratings(scoreboard)
results <- sim_season(scoreboard, 5000)
table <- results[[1]]
records <- results[[2]]
results <- results[[3]]
table
View(standings)
View(records)
table
View(standings)
View(records)
ratings <- get_power_ratings(scoreboard) %>%
select(team, power_rating)
logos <- scoreboard %>%
distinct(home_team, home_team_logo)
acc_teams <- c("Clemson", "Duke", "Louisville", "Florida St.", "Virginia Tech", "Georgia Tech",
"North Carolina", "Notre Dame", "Virginia", "Pittsburgh", "Boston College", "NC State", "Syracuse")
team_ids <- get_ncaa_teams(2023) %>%
filter(team_name %in% acc_teams)
completed <- scoreboard %>%
filter(away_team %in% acc_teams & home_team %in% acc_teams)
completed <- rbind(completed[c(9,1,4,5,8)] %>% `names<-`(c("date", "team", "runs", "opponent", "opponent_runs")),
completed[c(9,5,8,1,4)] %>% `names<-`(c("date", "team", "runs", "opponent", "opponent_runs"))) %>%
mutate(win = runs > opponent_runs,
tie = runs == opponent_runs)
current_standings <- completed %>%
group_by(team) %>%
summarise(games = n(),
wins = sum(win),
ties = sum(tie),
losses = games - wins - ties,
record = paste0(wins,"-",losses,"-",ties))
remaining <- data.frame()
for(i in 1:nrow(team_ids)){
raw <- glue("https://stats.ncaa.org/teams/{team_ids$team_id[i]}") %>%
readLines()
teams <- acc_teams[which(acc_teams != team_ids$team_name[i])]
locs <- grep(paste(teams, collapse = "|"), raw)
date <- gsub('<[^>]+>', '', raw[locs - 2]) %>%
trimws() %>%
str_remove_all("\\(1\\)|\\(2\\)")
opponent <- gsub('.*alt="([^"]+)".*', '\\1', raw[locs])
games <- data.frame(team = team_ids$team_name[i], opponent, date) %>%
filter(anydate(date) >= Sys.Date())
remaining <- rbind(remaining, games)
}
remaining_sos <- remaining %>%
merge(ratings, by.x = "opponent", by.y = "team") %>%
group_by(team) %>%
summarise(avg_rating = mean(power_rating)) %>%
ungroup() %>%
mutate(rank = rank(-avg_rating)) %>%
select(team, rank)
View(current_standings)
standings %>%
merge(current_standings %>% select(team, record))
standings %>%
merge(current_standings %>% select(team, record)) %>%
merge(remaining_sos, by = "team")
standings %>%
merge(current_standings %>% select(team, record)) %>%
merge(remaining_sos, by = "team", all = TRUE)
table <- standings %>%
merge(current_standings %>% select(team, record)) %>%
merge(remaining_sos, by = "team", all = TRUE) %>%
merge(logos, by.x = "team", by.y = "home_team") %>%
mutate(total = win + top3 + top6 + make_tournament) %>%
arrange(desc(total)) %>%
select(home_team_logo, team, record, rank, win, top3, top6, make_tournament) %>%
gt() %>%
gt_img_rows(home_team_logo) %>%
cols_label(home_team_logo = "",
team = "",
rank = "Remaining SOS",
win = "Win",
top3 = "Top 3",
top6 = "R1 Bye",
make_tournament = "Make Tournament") %>%
fmt_percent(5:8, decimals = 1) %>%
data_color(columns = c(win, top3, top6, make_tournament),
colors = scales::col_numeric(
palette = c("#FF6962", "#77DE78"),
domain = c(0,1)
)) %>%
data_color(columns = rank,
colors = scales::col_numeric(
palette = c("#FF6962", "#77DE78"),
domain = c(1,13)
)) %>%
gt_theme_espn() %>%
cols_align(align = "center",
columns = 3:6) %>%
tab_header(title = "2023 ACC Softball Tournament Odds",
subtitle = paste0("Based on ",num_sims," Simulations of Remainder of Season")) %>%
tab_footnote(footnote = paste0("Through ", max(scoreboard$game_date)),
locations = cells_column_labels(columns = record)) %>%
opt_align_table_header(align = "center") %>%
tab_style(style = cell_borders(sides = "right",
weight = px(3)),
locations = cells_body(columns = 4)) %>%
tab_style(style = cell_borders(sides = "top",
weight = px(3)),
locations = cells_body(rows = 1))
table <- standings %>%
merge(current_standings %>% select(team, record)) %>%
merge(remaining_sos, by = "team", all = TRUE) %>%
merge(logos, by.x = "team", by.y = "home_team") %>%
mutate(total = win + top3 + top6 + make_tournament) %>%
arrange(desc(total)) %>%
select(home_team_logo, team, record, rank, win, top3, top6, make_tournament) %>%
gt()
table <- standings %>%
merge(current_standings %>% select(team, record)) %>%
merge(remaining_sos, by = "team", all = TRUE) %>%
merge(logos, by.x = "team", by.y = "home_team") %>%
mutate(total = win + top3 + top6 + make_tournament) %>%
arrange(desc(total))
standings %>%
merge(current_standings %>% select(team, record)) %>%
merge(remaining_sos, by = "team", all = TRUE) %>%
merge(logos, by.x = "team", by.y = "home_team")
table <- standings %>%
merge(current_standings %>% select(team, record)) %>%
merge(remaining_sos, by = "team", all = TRUE) %>%
merge(logos, by.x = "team", by.y = "home_team") %>%
mutate(total = wins + top3 + top6 + make_tournament) %>%
arrange(desc(total)) %>%
select(home_team_logo, team, record, rank, wins, top3, top6, make_tournament) %>%
gt() %>%
gt_img_rows(home_team_logo) %>%
cols_label(home_team_logo = "",
team = "",
rank = "Remaining SOS",
wins = "Win",
top3 = "Top 3",
top6 = "R1 Bye",
make_tournament = "Make Tournament") %>%
fmt_percent(5:8, decimals = 1) %>%
data_color(columns = c(win, top3, top6, make_tournament),
colors = scales::col_numeric(
palette = c("#FF6962", "#77DE78"),
domain = c(0,1)
)) %>%
data_color(columns = rank,
colors = scales::col_numeric(
palette = c("#FF6962", "#77DE78"),
domain = c(1,13)
)) %>%
gt_theme_espn() %>%
cols_align(align = "center",
columns = 3:6) %>%
tab_header(title = "2023 ACC Softball Tournament Odds",
subtitle = paste0("Based on ",num_sims," Simulations of Remainder of Season")) %>%
tab_footnote(footnote = paste0("Through ", max(scoreboard$game_date)),
locations = cells_column_labels(columns = record)) %>%
opt_align_table_header(align = "center") %>%
tab_style(style = cell_borders(sides = "right",
weight = px(3)),
locations = cells_body(columns = 4)) %>%
tab_style(style = cell_borders(sides = "top",
weight = px(3)),
locations = cells_body(rows = 1))
View(standings)
standings <- get_standings(results)[[1]]
get_standings <- function(results){
records <- results %>%
group_by(team, sim_id) %>%
summarise(games = n(),
wins = sum(win),
losses = games - wins,
win_perc = wins / games) %>%
ungroup() %>%
group_by(sim_id) %>%
mutate(rank = rank(-win_perc, ties.method = "random")) %>%
ungroup()
records_upd <- records %>%
group_by(team) %>%
summarise(win = mean(rank == 1),
top3 = mean(rank <= 3),
top6 = mean(rank <= 6),
make_tournament = mean(rank <= 10))
#print(mean(records %>% filter(rank  == 10) %>% pull(wins)))
return(list(records_upd, records))
}
standings <- get_standings(results)[[1]]
records <- get_standings(results)[[2]]
table <- standings %>%
merge(current_standings %>% select(team, record)) %>%
merge(remaining_sos, by = "team", all = TRUE) %>%
merge(logos, by.x = "team", by.y = "home_team") %>%
mutate(total = win + top3 + top6 + make_tournament) %>%
arrange(desc(total)) %>%
select(home_team_logo, team, record, rank, win, top3, top6, make_tournament) %>%
gt() %>%
gt_img_rows(home_team_logo) %>%
cols_label(home_team_logo = "",
team = "",
rank = "Remaining SOS",
win = "Win",
top3 = "Top 3",
top6 = "R1 Bye",
make_tournament = "Make Tournament") %>%
fmt_percent(5:8, decimals = 1) %>%
data_color(columns = c(win, top3, top6, make_tournament),
colors = scales::col_numeric(
palette = c("#FF6962", "#77DE78"),
domain = c(0,1)
)) %>%
data_color(columns = rank,
colors = scales::col_numeric(
palette = c("#FF6962", "#77DE78"),
domain = c(1,13)
)) %>%
gt_theme_espn() %>%
cols_align(align = "center",
columns = 3:6) %>%
tab_header(title = "2023 ACC Softball Tournament Odds",
subtitle = paste0("Based on ",num_sims," Simulations of Remainder of Season")) %>%
tab_footnote(footnote = paste0("Through ", max(scoreboard$game_date)),
locations = cells_column_labels(columns = record)) %>%
opt_align_table_header(align = "center") %>%
tab_style(style = cell_borders(sides = "right",
weight = px(3)),
locations = cells_body(columns = 4)) %>%
tab_style(style = cell_borders(sides = "top",
weight = px(3)),
locations = cells_body(rows = 1))
num_sims=5000
table <- standings %>%
merge(current_standings %>% select(team, record)) %>%
merge(remaining_sos, by = "team", all = TRUE) %>%
merge(logos, by.x = "team", by.y = "home_team") %>%
mutate(total = win + top3 + top6 + make_tournament) %>%
arrange(desc(total)) %>%
select(home_team_logo, team, record, rank, win, top3, top6, make_tournament) %>%
gt() %>%
gt_img_rows(home_team_logo) %>%
cols_label(home_team_logo = "",
team = "",
rank = "Remaining SOS",
win = "Win",
top3 = "Top 3",
top6 = "R1 Bye",
make_tournament = "Make Tournament") %>%
fmt_percent(5:8, decimals = 1) %>%
data_color(columns = c(win, top3, top6, make_tournament),
colors = scales::col_numeric(
palette = c("#FF6962", "#77DE78"),
domain = c(0,1)
)) %>%
data_color(columns = rank,
colors = scales::col_numeric(
palette = c("#FF6962", "#77DE78"),
domain = c(1,13)
)) %>%
gt_theme_espn() %>%
cols_align(align = "center",
columns = 3:6) %>%
tab_header(title = "2023 ACC Softball Tournament Odds",
subtitle = paste0("Based on ",num_sims," Simulations of Remainder of Season")) %>%
tab_footnote(footnote = paste0("Through ", max(scoreboard$game_date)),
locations = cells_column_labels(columns = record)) %>%
opt_align_table_header(align = "center") %>%
tab_style(style = cell_borders(sides = "right",
weight = px(3)),
locations = cells_body(columns = 4)) %>%
tab_style(style = cell_borders(sides = "top",
weight = px(3)),
locations = cells_body(rows = 1))
table
table <- standings %>%
merge(current_standings %>% select(team, record)) %>%
merge(remaining_sos, by = "team", all = TRUE) %>%
merge(logos, by.x = "team", by.y = "home_team") %>%
mutate(total = win + top3 + top6 + make_tournament) %>%
arrange(desc(total)) %>%
select(home_team_logo, team, record, rank, win, top3, top6, make_tournament) %>%
gt() %>%
gt_img_rows(home_team_logo) %>%
cols_label(home_team_logo = "",
team = "",
rank = "Remaining SOS",
win = "Win",
top3 = "Top 3",
top6 = "R1 Bye",
make_tournament = "Make Tournament") %>%
fmt_percent(5:8, decimals = 1) %>%
data_color(columns = c(win, top3, top6, make_tournament),
colors = scales::col_numeric(
palette = c("#FF6962", "#77DE78"),
domain = c(0,1)
)) %>%
data_color(columns = rank,
colors = scales::col_numeric(
palette = c("#FF6962", "#77DE78"),
domain = c(1,6)
)) %>%
gt_theme_espn() %>%
cols_align(align = "center",
columns = 3:6) %>%
tab_header(title = "2023 ACC Softball Tournament Odds",
subtitle = paste0("Based on ",num_sims," Simulations of Remainder of Season")) %>%
tab_footnote(footnote = paste0("Through ", max(scoreboard$game_date)),
locations = cells_column_labels(columns = record)) %>%
opt_align_table_header(align = "center") %>%
tab_style(style = cell_borders(sides = "right",
weight = px(3)),
locations = cells_body(columns = 4)) %>%
tab_style(style = cell_borders(sides = "top",
weight = px(3)),
locations = cells_body(rows = 1))
tabl
table
gtsave(table,"acc_predictions_5_1.png")
