scale_x_continuous(breaks = c(1,5,10,15,20,25), limits = c(1,25)) +
scale_y_continuous(breaks = c(1,5,10,15,20,25), limits = c(1,25)) +
geom_label(x = 22, y = 3, label = "Undervalued by USA Today", size = 3) +
geom_label(x = 4, y = 23, label = "Overvalued by USA Today", size = 3) +
labs(x = "Power Ranking",
y = "USA Today Ranking",
title = "D1 NCAA Softball Rankings",
subtitle = "Through 4/14/23") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
theme_few() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_blank())
ggplot(rankings %>% mutate(power_rank = ifelse(!is.na(Rank) & power_rank > 25, 25, power_rank)),
aes(x = power_rank, y = Rank)) +
geom_from_path(aes(path = home_team_logo), height = .05) +
scale_x_continuous(breaks = c(1,5,10,15,20,25), limits = c(1,25)) +
scale_y_continuous(breaks = c(1,5,10,15,20,25), limits = c(1,25)) +
geom_label(x = 22, y = 3, label = "Undervalued by USA Today", size = 3) +
geom_label(x = 4, y = 23, label = "Overvalued by USA Today", size = 3) +
labs(x = "Power Ranking",
y = "USA Today Ranking",
title = "D1 NCAA Softball Rankings",
subtitle = "Through 4/14/23") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
theme_few() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_blank())
library(softballR)
library(nflplotR)
library(ggthemes)
source("~/Projects/softball-projects/get_power_ratings.R")
actual_rankings <- get_rankings("USA Today") %>%
select(Team, Rank) %>%
mutate(Team = trimws(Team),
Team = ifelse(Team == "Oklahoma State", "Oklahoma St.", Team),
Team = ifelse(Team == "Florida State", "Florida St.", Team),
Team = ifelse(Team == "Wichita State", "Wichita St.", Team))
scoreboard <- load_ncaa_scoreboard(2023)
power_rankings <- get_power_ratings(scoreboard) %>%
arrange(desc(power_rating)) %>%
mutate(power_rank = rank(-power_rating)) %>%
select(team, power_rank)
logos <- scoreboard %>%
distinct(home_team, home_team_logo)
rankings <- merge(actual_rankings, power_rankings, by.x = "Team", by.y = "team", all=T) %>%
merge(logos, by.x = "Team", by.y = "home_team")
ggplot(rankings %>% mutate(power_rank = ifelse(!is.na(Rank) & power_rank > 25, 25, power_rank)),
aes(x = power_rank, y = Rank)) +
geom_from_path(aes(path = home_team_logo), height = .05) +
scale_x_continuous(breaks = c(1,5,10,15,20,25), limits = c(1,25)) +
scale_y_continuous(breaks = c(1,5,10,15,20,25), limits = c(1,25)) +
geom_label(x = 22, y = 3, label = "Undervalued by USA Today", size = 3) +
geom_label(x = 4, y = 23, label = "Overvalued by USA Today", size = 3) +
labs(x = "Power Ranking",
y = "USA Today Ranking",
title = "D1 NCAA Softball Rankings",
subtitle = "Through 4/14/23") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
theme_few() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_blank())
power_rankings <- get_power_ratings(scoreboard) %>%
arrange(desc(power_rating)) %>%
mutate(power_rank = rank(-power_rating),
team = ifelse(team == "Texas A&amp;M", "Texas A&M", team)) %>%
select(team, power_rank)
logos <- scoreboard %>%
distinct(home_team, home_team_logo)
rankings <- merge(actual_rankings, power_rankings, by.x = "Team", by.y = "team", all=T) %>%
merge(logos, by.x = "Team", by.y = "home_team")
ggplot(rankings %>% mutate(power_rank = ifelse(!is.na(Rank) & power_rank > 25, 25, power_rank)),
aes(x = power_rank, y = Rank)) +
geom_from_path(aes(path = home_team_logo), height = .05) +
scale_x_continuous(breaks = c(1,5,10,15,20,25), limits = c(1,25)) +
scale_y_continuous(breaks = c(1,5,10,15,20,25), limits = c(1,25)) +
geom_label(x = 22, y = 3, label = "Undervalued by USA Today", size = 3) +
geom_label(x = 4, y = 23, label = "Overvalued by USA Today", size = 3) +
labs(x = "Power Ranking",
y = "USA Today Ranking",
title = "D1 NCAA Softball Rankings",
subtitle = "Through 4/14/23") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
theme_few() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_blank())
"Texas A&M"=="Texas A&M"
View(logos)
logos <- scoreboard %>%
distinct(home_team, home_team_logo) %>%
rankings <- merge(actual_rankings, power_rankings, by.x = "Team", by.y = "team", all=T) %>%
merge(logos, by.x = "Team", by.y = "home_team")
logos <- scoreboard %>%
distinct(home_team, home_team_logo) %>%
mutate(team = ifelse(team == "Texas A&amp;M", "Texas A&M", team))
library(softballR)
library(nflplotR)
library(ggthemes)
source("~/Projects/softball-projects/get_power_ratings.R")
actual_rankings <- get_rankings("USA Today") %>%
select(Team, Rank) %>%
mutate(Team = trimws(Team),
Team = ifelse(Team == "Oklahoma State", "Oklahoma St.", Team),
Team = ifelse(Team == "Florida State", "Florida St.", Team),
Team = ifelse(Team == "Wichita State", "Wichita St.", Team))
scoreboard <- load_ncaa_scoreboard(2023)
power_rankings <- get_power_ratings(scoreboard) %>%
arrange(desc(power_rating)) %>%
mutate(power_rank = rank(-power_rating),
team = ifelse(team == "Texas A&amp;M", "Texas A&M", team)) %>%
select(team, power_rank)
logos <- scoreboard %>%
distinct(home_team, home_team_logo) %>%
mutate(home_team = ifelse(team == "Texas A&amp;M", "Texas A&M", home_team))
logos <- scoreboard %>%
distinct(home_team, home_team_logo) %>%
mutate(home_team = ifelse(home_team == "Texas A&amp;M", "Texas A&M", home_team))
rankings <- merge(actual_rankings, power_rankings, by.x = "Team", by.y = "team", all=T) %>%
merge(logos, by.x = "Team", by.y = "home_team")
ggplot(rankings %>% mutate(power_rank = ifelse(!is.na(Rank) & power_rank > 25, 25, power_rank)),
aes(x = power_rank, y = Rank)) +
geom_from_path(aes(path = home_team_logo), height = .05) +
scale_x_continuous(breaks = c(1,5,10,15,20,25), limits = c(1,25)) +
scale_y_continuous(breaks = c(1,5,10,15,20,25), limits = c(1,25)) +
geom_label(x = 22, y = 3, label = "Undervalued by USA Today", size = 3) +
geom_label(x = 4, y = 23, label = "Overvalued by USA Today", size = 3) +
labs(x = "Power Ranking",
y = "USA Today Ranking",
title = "D1 NCAA Softball Rankings",
subtitle = "Through 4/14/23") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
theme_few() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_blank())
plot <- ggplot(rankings %>% mutate(power_rank = ifelse(!is.na(Rank) & power_rank > 25, 25, power_rank)),
aes(x = power_rank, y = Rank)) +
geom_from_path(aes(path = home_team_logo), height = .05) +
scale_x_continuous(breaks = c(1,5,10,15,20,25), limits = c(1,25)) +
scale_y_continuous(breaks = c(1,5,10,15,20,25), limits = c(1,25)) +
geom_label(x = 22, y = 3, label = "Undervalued by USA Today", size = 3) +
geom_label(x = 4, y = 23, label = "Overvalued by USA Today", size = 3) +
labs(x = "Power Ranking",
y = "USA Today Ranking",
title = "D1 NCAA Softball Rankings",
subtitle = "Through 4/14/23") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
theme_few() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_blank())
ggsave(filename = "~/Projects/softball-projects/compare_rankings.png")
plot <- ggplot(rankings %>% mutate(power_rank = ifelse(!is.na(Rank) & power_rank > 25, 25, power_rank)),
aes(x = power_rank, y = Rank)) +
geom_from_path(aes(path = home_team_logo), height = .05) +
scale_x_continuous(breaks = c(1,5,10,15,20,25), limits = c(1,25)) +
scale_y_continuous(breaks = c(1,5,10,15,20,25), limits = c(1,25)) +
geom_label(x = 22, y = 3, label = "Overvalued by USA Today", size = 3) +
geom_label(x = 4, y = 23, label = "Undervalued by USA Today", size = 3) +
labs(x = "Power Ranking",
y = "USA Today Ranking",
title = "D1 NCAA Softball Rankings",
subtitle = "Through 4/14/23") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
theme_few() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_blank())
ggsave(filename = "~/Projects/softball-projects/compare_rankings.png")
library(softballR)
?load_ncaa_scoreboard
devtools::install_github("sportsdataverse/softballR")
detach("package:softballR", unload = TRUE)
devtools::install_github("sportsdataverse/softballR")
library(softballR)
?load_ncaa_scoreboard
load_ncaa_scoreboard %>% help
help("load_ncaa_scoreboard")
library(tidyverse)
scoreboard_2021 <- load_ncaa_scoreboard(2021)
library(softballR)
library(tidyverse)
scoreboard_2021 <- load_ncaa_scoreboard(2021)
View(scoreboard_2021)
library(anytime)
scoreboard_2021 <- load_ncaa_scoreboard(2021) %>% mutate(game_date = anydate(game_date))
View(scoreboard_2021)
scoreboard_2021 <- load_ncaa_scoreboard(2021) %>% mutate(game_date = anydate(game_date),
postseason = ifelse(game_date >= "2021-05-21",T,F))
View(scoreboard_2021)
regular_season_2021 <- scoreboard_2021 %>%
filter(postseason == F)
postseason_2021 <- scoreboard_2021 %>%
filter(postseason == T)
library(lubridate)
library(dplyr)
library(rvest)
library(magrittr)
library(stringr)
get_ncaa_scoreboard <- function(date){
if(as.Date(date) > Sys.Date()){
stop("Invalid Date")
}
if(class(date) != "Date"){
year <- try(strsplit(date, "-")[[1]][1])
month <- try(strsplit(date, "-")[[1]][2])
day <- try(strsplit(date, "-")[[1]][3])
} else{
month <- lubridate::month(date)
day <- lubridate::day(date)
year <- lubridate::year(date)
}
division_id <- dplyr::case_when(year == 2023 ~ 18101,
year == 2022 ~ 17840,
year == 2021 ~ 15620,
year == 2020 ~ 15220,
year == 2019 ~ 16820)
raw <- paste0("https://stats.ncaa.org/season_divisions/",division_id,"/livestream_scoreboards?utf8=%E2%9C%93&season_division_id=&game_date=",month,"%2F",day,"%2F",year) %>%
readLines()
locs <- grep("<tr id=\"", raw)
assemble_df <- function(loc, next_loc){
game_vec <- raw[loc:(next_loc-1)]
game_id <- game_vec[grep("<tr id=\"", game_vec)[1]] %>%
trimws() %>%
stringr::str_remove_all("<tr id=\"contest_|\">")
game_date <- game_vec[grep("<td rowspan=\"2\" valign=\"middle\">", game_vec)[1] + 1] %>%
trimws()
away_team <- game_vec[grep("<img height=\"20px\" width=\"30px\" alt=\"",game_vec)[1]] %>%
strsplit("alt=\"|\" src=\"") %>%
magrittr::extract2(1) %>%
magrittr::extract(2)
away_team_id <- game_vec[grep("<a target=\"TEAMS_WIN\" class=\"skipMask\" href=\"/teams/",game_vec)[1]] %>%
strsplit("href=\"/teams/|\">") %>%
magrittr::extract2(1) %>%
magrittr::extract(2)
away_team_logo <- game_vec[grep("<img height=\"20px\" width=\"30px\" alt=\"",game_vec)[1]] %>%
strsplit("alt=\"|\" src=\"") %>%
magrittr::extract2(1) %>%
magrittr::extract(3) %>%
stringr::str_remove_all("\" />")
away_team_runs <- game_vec[grep("<div id=\"score_", game_vec)[1] + 1] %>%
trimws()
home_team <- game_vec[grep("<img height=\"20px\" width=\"30px\" alt=\"",game_vec)[2]] %>%
strsplit("alt=\"|\" src=\"") %>%
magrittr::extract2(1) %>%
magrittr::extract(2)
home_team_id <- game_vec[grep("<a target=\"TEAMS_WIN\" class=\"skipMask\" href=\"/teams/",game_vec)[2]] %>%
strsplit("href=\"/teams/|\">") %>%
magrittr::extract2(1) %>%
magrittr::extract(2)
home_team_logo <- game_vec[grep("<img height=\"20px\" width=\"30px\" alt=\"",game_vec)[2]] %>%
strsplit("alt=\"|\" src=\"") %>%
magrittr::extract2(1) %>%
magrittr::extract(3) %>%
stringr::str_remove_all("\" />")
home_team_runs <- game_vec[grep("<div id=\"score_", game_vec)[2] + 1] %>%
trimws()
status <- game_vec[grep("<div class=\"livestream", game_vec) + 1] %>%
trimws()
game_df <- data.frame(away_team, away_team_id, away_team_logo, away_team_runs,
home_team, home_team_id, home_team_logo, home_team_runs,
game_date, game_id, status) %>%
filter(status == "Final")
return(game_df)
}
games_df <- data.frame()
for(i in 1:(length(locs) - 2)){
if(i %% 2 == 0) next
loc <- locs[i]
if(i == length(locs) - 3){
next_loc <- length(raw)
} else{
next_loc <- locs[i + 2]
}
games_df <- rbind(games_df, assemble_df(loc, loc + 100))
}
games_df <- games_df %>%
dplyr::filter(away_team_runs != "") %>%
dplyr::mutate(home_team_runs = as.numeric(home_team_runs),
away_team_runs = as.numeric(away_team_runs),
game_date = stringr::str_remove_all(game_date, " \\(1\\)| \\(2\\)"))
return(games_df)
}
get_ncaa_season_scoreboard <- function(season){
options(warn = -1)
s <- try(as.numeric(season))
if("try-error" %in% class(s) || is.na(s) || s < 2019 || s > 2023){
stop("Invalid Season")
}
seasons <- data.frame(season = 2015:2023,
start_date = c("2015-02-05","2016-02-11","2017-02-09","2018-02-08","2019-02-07","2020-02-06","2021-02-11","2022-02-10","2023-02-09"),
end_date = c("2015-06-03","2016-06-08","2017-06-07","2018-06-06","2019-06-04","2020-03-12","2021-06-10","2022-06-09","2023-06-09")) #Go back and fix after season
start_date <- seasons %>% dplyr::filter(season == s) %>% dplyr::select(start_date) %>% as.character() %>% as.Date()
end_date <- seasons %>% dplyr::filter(season == s) %>% dplyr::select(end_date) %>% as.character() %>% as.Date()
scoreboard <- data.frame()
dates <- seq(start_date,min(end_date,Sys.Date()),1)
scoreboard <- do.call(rbind, lapply(X = dates, FUN = get_ncaa_scoreboard))
return(scoreboard)
}
scoreboard <- get_ncaa_season_scoreboard(2023)
View(scoreboard)
setwd("~/Projects/softballR-data")
saveRDS(object = scoreboard, file = "data/ncaa_scoreboard_2023.RDS")
ncaa_scoreboard_2023 <- readRDS("~/Projects/softballR-data/data/ncaa_scoreboard_2023.RDS")
View(ncaa_scoreboard_2023)
get_ncaa_scoreboard <- function(date){
if(as.Date(date) >= Sys.Date()){
stop("Invalid Date")
}
if(class(date) != "Date"){
year <- try(strsplit(date, "-")[[1]][1])
month <- try(strsplit(date, "-")[[1]][2])
day <- try(strsplit(date, "-")[[1]][3])
} else{
month <- lubridate::month(date)
day <- lubridate::day(date)
year <- lubridate::year(date)
}
division_id <- dplyr::case_when(year == 2023 ~ 18101,
year == 2022 ~ 17840,
year == 2021 ~ 15620,
year == 2020 ~ 15220,
year == 2019 ~ 16820)
raw <- paste0("https://stats.ncaa.org/season_divisions/",division_id,"/livestream_scoreboards?utf8=%E2%9C%93&season_division_id=&game_date=",month,"%2F",day,"%2F",year) %>%
readLines()
locs <- grep("<tr id=\"", raw)
assemble_df <- function(loc, next_loc){
game_vec <- raw[loc:(next_loc-1)]
game_id <- game_vec[grep("<tr id=\"", game_vec)[1]] %>%
trimws() %>%
stringr::str_remove_all("<tr id=\"contest_|\">")
game_date <- game_vec[grep("<td rowspan=\"2\" valign=\"middle\">", game_vec)[1] + 1] %>%
trimws()
away_team <- game_vec[grep("<img height=\"20px\" width=\"30px\" alt=\"",game_vec)[1]] %>%
strsplit("alt=\"|\" src=\"") %>%
magrittr::extract2(1) %>%
magrittr::extract(2)
away_team_id <- game_vec[grep("<a target=\"TEAMS_WIN\" class=\"skipMask\" href=\"/teams/",game_vec)[1]] %>%
strsplit("href=\"/teams/|\">") %>%
magrittr::extract2(1) %>%
magrittr::extract(2)
away_team_logo <- game_vec[grep("<img height=\"20px\" width=\"30px\" alt=\"",game_vec)[1]] %>%
strsplit("alt=\"|\" src=\"") %>%
magrittr::extract2(1) %>%
magrittr::extract(3) %>%
stringr::str_remove_all("\" />")
away_team_runs <- game_vec[grep("<div id=\"score_", game_vec)[1] + 1] %>%
trimws()
home_team <- game_vec[grep("<img height=\"20px\" width=\"30px\" alt=\"",game_vec)[2]] %>%
strsplit("alt=\"|\" src=\"") %>%
magrittr::extract2(1) %>%
magrittr::extract(2)
home_team_id <- game_vec[grep("<a target=\"TEAMS_WIN\" class=\"skipMask\" href=\"/teams/",game_vec)[2]] %>%
strsplit("href=\"/teams/|\">") %>%
magrittr::extract2(1) %>%
magrittr::extract(2)
home_team_logo <- game_vec[grep("<img height=\"20px\" width=\"30px\" alt=\"",game_vec)[2]] %>%
strsplit("alt=\"|\" src=\"") %>%
magrittr::extract2(1) %>%
magrittr::extract(3) %>%
stringr::str_remove_all("\" />")
home_team_runs <- game_vec[grep("<div id=\"score_", game_vec)[2] + 1] %>%
trimws()
status <- game_vec[grep("<div class=\"livestream", game_vec) + 1] %>%
trimws()
game_df <- data.frame(away_team, away_team_id, away_team_logo, away_team_runs,
home_team, home_team_id, home_team_logo, home_team_runs,
game_date, game_id, status) %>%
filter(status == "Final")
return(game_df)
}
games_df <- data.frame()
for(i in 1:(length(locs) - 2)){
if(i %% 2 == 0) next
loc <- locs[i]
if(i == length(locs) - 3){
next_loc <- length(raw)
} else{
next_loc <- locs[i + 2]
}
games_df <- rbind(games_df, assemble_df(loc, loc + 100))
}
games_df <- games_df %>%
dplyr::filter(away_team_runs != "") %>%
dplyr::mutate(home_team_runs = as.numeric(home_team_runs),
away_team_runs = as.numeric(away_team_runs),
game_date = stringr::str_remove_all(game_date, " \\(1\\)| \\(2\\)"))
return(games_df)
}
get_ncaa_scoreboard <- function(date){
if(as.Date(date) > Sys.Date()){
stop("Invalid Date")
}
if(class(date) != "Date"){
year <- try(strsplit(date, "-")[[1]][1])
month <- try(strsplit(date, "-")[[1]][2])
day <- try(strsplit(date, "-")[[1]][3])
} else{
month <- lubridate::month(date)
day <- lubridate::day(date)
year <- lubridate::year(date)
}
division_id <- dplyr::case_when(year == 2023 ~ 18101,
year == 2022 ~ 17840,
year == 2021 ~ 15620,
year == 2020 ~ 15220,
year == 2019 ~ 16820)
raw <- paste0("https://stats.ncaa.org/season_divisions/",division_id,"/livestream_scoreboards?utf8=%E2%9C%93&season_division_id=&game_date=",month,"%2F",day,"%2F",year) %>%
readLines()
locs <- grep("<tr id=\"", raw)
assemble_df <- function(loc, next_loc){
game_vec <- raw[loc:(next_loc-1)]
game_id <- game_vec[grep("<tr id=\"", game_vec)[1]] %>%
trimws() %>%
stringr::str_remove_all("<tr id=\"contest_|\">")
game_date <- game_vec[grep("<td rowspan=\"2\" valign=\"middle\">", game_vec)[1] + 1] %>%
trimws()
away_team <- game_vec[grep("<img height=\"20px\" width=\"30px\" alt=\"",game_vec)[1]] %>%
strsplit("alt=\"|\" src=\"") %>%
magrittr::extract2(1) %>%
magrittr::extract(2)
away_team_id <- game_vec[grep("<a target=\"TEAMS_WIN\" class=\"skipMask\" href=\"/teams/",game_vec)[1]] %>%
strsplit("href=\"/teams/|\">") %>%
magrittr::extract2(1) %>%
magrittr::extract(2)
away_team_logo <- game_vec[grep("<img height=\"20px\" width=\"30px\" alt=\"",game_vec)[1]] %>%
strsplit("alt=\"|\" src=\"") %>%
magrittr::extract2(1) %>%
magrittr::extract(3) %>%
stringr::str_remove_all("\" />")
away_team_runs <- game_vec[grep("<div id=\"score_", game_vec)[1] + 1] %>%
trimws()
home_team <- game_vec[grep("<img height=\"20px\" width=\"30px\" alt=\"",game_vec)[2]] %>%
strsplit("alt=\"|\" src=\"") %>%
magrittr::extract2(1) %>%
magrittr::extract(2)
home_team_id <- game_vec[grep("<a target=\"TEAMS_WIN\" class=\"skipMask\" href=\"/teams/",game_vec)[2]] %>%
strsplit("href=\"/teams/|\">") %>%
magrittr::extract2(1) %>%
magrittr::extract(2)
home_team_logo <- game_vec[grep("<img height=\"20px\" width=\"30px\" alt=\"",game_vec)[2]] %>%
strsplit("alt=\"|\" src=\"") %>%
magrittr::extract2(1) %>%
magrittr::extract(3) %>%
stringr::str_remove_all("\" />")
home_team_runs <- game_vec[grep("<div id=\"score_", game_vec)[2] + 1] %>%
trimws()
status <- game_vec[grep("<div class=\"livestream", game_vec) + 1] %>%
trimws()
game_df <- data.frame(away_team, away_team_id, away_team_logo, away_team_runs,
home_team, home_team_id, home_team_logo, home_team_runs,
game_date, game_id, status) %>%
filter(status == "Final")
return(game_df)
}
games_df <- data.frame()
for(i in 1:(length(locs) - 2)){
if(i %% 2 == 0) next
loc <- locs[i]
if(i == length(locs) - 3){
next_loc <- length(raw)
} else{
next_loc <- locs[i + 2]
}
games_df <- rbind(games_df, assemble_df(loc, loc + 100))
}
games_df <- games_df %>%
dplyr::filter(away_team_runs != "") %>%
dplyr::mutate(home_team_runs = as.numeric(home_team_runs),
away_team_runs = as.numeric(away_team_runs),
game_date = stringr::str_remove_all(game_date, " \\(1\\)| \\(2\\)"))
return(games_df)
}
get_ncaa_season_scoreboard <- function(season){
options(warn = -1)
s <- try(as.numeric(season))
if("try-error" %in% class(s) || is.na(s) || s < 2019 || s > 2023){
stop("Invalid Season")
}
seasons <- data.frame(season = 2015:2023,
start_date = c("2015-02-05","2016-02-11","2017-02-09","2018-02-08","2019-02-07","2020-02-06","2021-02-11","2022-02-10","2023-02-09"),
end_date = c("2015-06-03","2016-06-08","2017-06-07","2018-06-06","2019-06-04","2020-03-12","2021-06-10","2022-06-09","2023-06-09")) #Go back and fix after season
start_date <- seasons %>% dplyr::filter(season == s) %>% dplyr::select(start_date) %>% as.character() %>% as.Date()
end_date <- seasons %>% dplyr::filter(season == s) %>% dplyr::select(end_date) %>% as.character() %>% as.Date()
scoreboard <- data.frame()
dates <- seq(start_date,min(end_date,Sys.Date()),1)
scoreboard <- do.call(rbind, lapply(X = dates, FUN = get_ncaa_scoreboard))
return(scoreboard)
}
scoreboard <- get_ncaa_season_scoreboard(2023)
saveRDS(object = scoreboard, file = "data/ncaa_scoreboard_2023.RDS")
library(softballR)
library(tidyverse)
setwd("~/Projects/softball-projects/ACC Softball Analytics/sim_season")
source("get_current_rpi.R")
source("get_power_ratings.R")
source("acc_season_sims.R")
scoreboard <- load_ncaa_scoreboard(2023)
standings <- get_power_ratings(scoreboard)
results <- sim_season(scoreboard, 5000)
table <- results[[1]]
records <- results[[2]]
results <- results[[3]]
table
gtsave(table,"acc_predictions_4_29.png")
View(scoreboard)
scoreboard %>% filter(away_team == "Virginia" | home_team == "Virginia") %>% view
scoreboard <- load_ncaa_scoreboard(2023) %>%
distinct()
